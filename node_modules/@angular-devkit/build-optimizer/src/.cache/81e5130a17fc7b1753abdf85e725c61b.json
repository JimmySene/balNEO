{"remainingRequest":"/home/mohamed/Jimmy/balNEO/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/mohamed/Jimmy/balNEO/node_modules/@angular/animations/esm2015/browser.js","dependencies":[{"path":"/home/mohamed/Jimmy/balNEO/node_modules/@angular/animations/esm2015/browser.js","mtime":1521065000000},{"path":"/home/mohamed/Jimmy/balNEO/node_modules/cache-loader/dist/cjs.js","mtime":1520938639765},{"path":"/home/mohamed/Jimmy/balNEO/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/**\n * @license Angular v5.2.9\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\nimport { AUTO_STYLE, NoopAnimationPlayer, sequence, style, ɵAnimationGroupPlayer, ɵPRE_STYLE } from '@angular/animations';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} players\n * @return {?}\n */\nfunction optimizeGroupPlayer(players) {\n    switch (players.length) {\n        case 0:\n            return new NoopAnimationPlayer();\n        case 1:\n            return players[0];\n        default:\n            return new ɵAnimationGroupPlayer(players);\n    }\n}\n/**\n * @param {?} driver\n * @param {?} normalizer\n * @param {?} element\n * @param {?} keyframes\n * @param {?=} preStyles\n * @param {?=} postStyles\n * @return {?}\n */\nfunction normalizeKeyframes(driver, normalizer, element, keyframes, preStyles = {}, postStyles = {}) {\n    const /** @type {?} */ errors = [];\n    const /** @type {?} */ normalizedKeyframes = [];\n    let /** @type {?} */ previousOffset = -1;\n    let /** @type {?} */ previousKeyframe = null;\n    keyframes.forEach(kf => {\n        const /** @type {?} */ offset = /** @type {?} */ (kf['offset']);\n        const /** @type {?} */ isSameOffset = offset == previousOffset;\n        const /** @type {?} */ normalizedKeyframe = (isSameOffset && previousKeyframe) || {};\n        Object.keys(kf).forEach(prop => {\n            let /** @type {?} */ normalizedProp = prop;\n            let /** @type {?} */ normalizedValue = kf[prop];\n            if (prop !== 'offset') {\n                normalizedProp = normalizer.normalizePropertyName(normalizedProp, errors);\n                switch (normalizedValue) {\n                    case ɵPRE_STYLE:\n                        normalizedValue = preStyles[prop];\n                        break;\n                    case AUTO_STYLE:\n                        normalizedValue = postStyles[prop];\n                        break;\n                    default:\n                        normalizedValue =\n                            normalizer.normalizeStyleValue(prop, normalizedProp, normalizedValue, errors);\n                        break;\n                }\n            }\n            normalizedKeyframe[normalizedProp] = normalizedValue;\n        });\n        if (!isSameOffset) {\n            normalizedKeyframes.push(normalizedKeyframe);\n        }\n        previousKeyframe = normalizedKeyframe;\n        previousOffset = offset;\n    });\n    if (errors.length) {\n        const /** @type {?} */ LINE_START = '\\n - ';\n        throw new Error(`Unable to animate due to the following errors:${LINE_START}${errors.join(LINE_START)}`);\n    }\n    return normalizedKeyframes;\n}\n/**\n * @param {?} player\n * @param {?} eventName\n * @param {?} event\n * @param {?} callback\n * @return {?}\n */\nfunction listenOnPlayer(player, eventName, event, callback) {\n    switch (eventName) {\n        case 'start':\n            player.onStart(() => callback(event && copyAnimationEvent(event, 'start', player.totalTime)));\n            break;\n        case 'done':\n            player.onDone(() => callback(event && copyAnimationEvent(event, 'done', player.totalTime)));\n            break;\n        case 'destroy':\n            player.onDestroy(() => callback(event && copyAnimationEvent(event, 'destroy', player.totalTime)));\n            break;\n    }\n}\n/**\n * @param {?} e\n * @param {?=} phaseName\n * @param {?=} totalTime\n * @return {?}\n */\nfunction copyAnimationEvent(e, phaseName, totalTime) {\n    const /** @type {?} */ event = makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, phaseName || e.phaseName, totalTime == undefined ? e.totalTime : totalTime);\n    const /** @type {?} */ data = (/** @type {?} */ (e))['_data'];\n    if (data != null) {\n        (/** @type {?} */ (event))['_data'] = data;\n    }\n    return event;\n}\n/**\n * @param {?} element\n * @param {?} triggerName\n * @param {?} fromState\n * @param {?} toState\n * @param {?=} phaseName\n * @param {?=} totalTime\n * @return {?}\n */\nfunction makeAnimationEvent(element, triggerName, fromState, toState, phaseName = '', totalTime = 0) {\n    return { element, triggerName, fromState, toState, phaseName, totalTime };\n}\n/**\n * @param {?} map\n * @param {?} key\n * @param {?} defaultValue\n * @return {?}\n */\nfunction getOrSetAsInMap(map, key, defaultValue) {\n    let /** @type {?} */ value;\n    if (map instanceof Map) {\n        value = map.get(key);\n        if (!value) {\n            map.set(key, value = defaultValue);\n        }\n    }\n    else {\n        value = map[key];\n        if (!value) {\n            value = map[key] = defaultValue;\n        }\n    }\n    return value;\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction parseTimelineCommand(command) {\n    const /** @type {?} */ separatorPos = command.indexOf(':');\n    const /** @type {?} */ id = command.substring(1, separatorPos);\n    const /** @type {?} */ action = command.substr(separatorPos + 1);\n    return [id, action];\n}\nlet _contains = (elm1, elm2) => false;\nlet _matches = (element, selector) => false;\nlet _query = (element, selector, multi) => {\n    return [];\n};\nif (typeof Element != 'undefined') {\n    // this is well supported in all browsers\n    _contains = (elm1, elm2) => { return /** @type {?} */ (elm1.contains(elm2)); };\n    if (Element.prototype.matches) {\n        _matches = (element, selector) => element.matches(selector);\n    }\n    else {\n        const /** @type {?} */ proto = /** @type {?} */ (Element.prototype);\n        const /** @type {?} */ fn = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector ||\n            proto.oMatchesSelector || proto.webkitMatchesSelector;\n        if (fn) {\n            _matches = (element, selector) => fn.apply(element, [selector]);\n        }\n    }\n    _query = (element, selector, multi) => {\n        let /** @type {?} */ results = [];\n        if (multi) {\n            results.push(...element.querySelectorAll(selector));\n        }\n        else {\n            const /** @type {?} */ elm = element.querySelector(selector);\n            if (elm) {\n                results.push(elm);\n            }\n        }\n        return results;\n    };\n}\n/**\n * @param {?} prop\n * @return {?}\n */\nfunction containsVendorPrefix(prop) {\n    // Webkit is the only real popular vendor prefix nowadays\n    // cc: http://shouldiprefix.com/\n    return prop.substring(1, 6) == 'ebkit'; // webkit or Webkit\n}\nlet _CACHED_BODY = null;\nlet _IS_WEBKIT = false;\n/**\n * @param {?} prop\n * @return {?}\n */\nfunction validateStyleProperty(prop) {\n    if (!_CACHED_BODY) {\n        _CACHED_BODY = getBodyNode() || {};\n        _IS_WEBKIT = /** @type {?} */ ((_CACHED_BODY)).style ? ('WebkitAppearance' in /** @type {?} */ ((_CACHED_BODY)).style) : false;\n    }\n    let /** @type {?} */ result = true;\n    if (/** @type {?} */ ((_CACHED_BODY)).style && !containsVendorPrefix(prop)) {\n        result = prop in /** @type {?} */ ((_CACHED_BODY)).style;\n        if (!result && _IS_WEBKIT) {\n            const /** @type {?} */ camelProp = 'Webkit' + prop.charAt(0).toUpperCase() + prop.substr(1);\n            result = camelProp in /** @type {?} */ ((_CACHED_BODY)).style;\n        }\n    }\n    return result;\n}\n/**\n * @return {?}\n */\nfunction getBodyNode() {\n    if (typeof document != 'undefined') {\n        return document.body;\n    }\n    return null;\n}\nconst matchesElement = _matches;\nconst containsElement = _contains;\nconst invokeQuery = _query;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@experimental\n */\nclass NoopAnimationDriver {\n    /**\n     * @param {?} prop\n     * @return {?}\n     */\n    validateStyleProperty(prop) { return validateStyleProperty(prop); }\n    /**\n     * @param {?} element\n     * @param {?} selector\n     * @return {?}\n     */\n    matchesElement(element, selector) {\n        return matchesElement(element, selector);\n    }\n    /**\n     * @param {?} elm1\n     * @param {?} elm2\n     * @return {?}\n     */\n    containsElement(elm1, elm2) { return containsElement(elm1, elm2); }\n    /**\n     * @param {?} element\n     * @param {?} selector\n     * @param {?} multi\n     * @return {?}\n     */\n    query(element, selector, multi) {\n        return invokeQuery(element, selector, multi);\n    }\n    /**\n     * @param {?} element\n     * @param {?} prop\n     * @param {?=} defaultValue\n     * @return {?}\n     */\n    computeStyle(element, prop, defaultValue) {\n        return defaultValue || '';\n    }\n    /**\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?} easing\n     * @param {?=} previousPlayers\n     * @return {?}\n     */\n    animate(element, keyframes, duration, delay, easing, previousPlayers = []) {\n        return new NoopAnimationPlayer();\n    }\n}\n/**\n * \\@experimental\n * @abstract\n */\nclass AnimationDriver {\n}\nAnimationDriver.NOOP = new NoopAnimationDriver();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst ONE_SECOND = 1000;\nconst SUBSTITUTION_EXPR_START = '{{';\nconst SUBSTITUTION_EXPR_END = '}}';\nconst ENTER_CLASSNAME = 'ng-enter';\nconst LEAVE_CLASSNAME = 'ng-leave';\n\n\nconst NG_TRIGGER_CLASSNAME = 'ng-trigger';\nconst NG_TRIGGER_SELECTOR = '.ng-trigger';\nconst NG_ANIMATING_CLASSNAME = 'ng-animating';\nconst NG_ANIMATING_SELECTOR = '.ng-animating';\n/**\n * @param {?} value\n * @return {?}\n */\nfunction resolveTimingValue(value) {\n    if (typeof value == 'number')\n        return value;\n    const /** @type {?} */ matches = (/** @type {?} */ (value)).match(/^(-?[\\.\\d]+)(m?s)/);\n    if (!matches || matches.length < 2)\n        return 0;\n    return _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);\n}\n/**\n * @param {?} value\n * @param {?} unit\n * @return {?}\n */\nfunction _convertTimeValueToMS(value, unit) {\n    switch (unit) {\n        case 's':\n            return value * ONE_SECOND;\n        default:\n            // ms or something else\n            return value;\n    }\n}\n/**\n * @param {?} timings\n * @param {?} errors\n * @param {?=} allowNegativeValues\n * @return {?}\n */\nfunction resolveTiming(timings, errors, allowNegativeValues) {\n    return timings.hasOwnProperty('duration') ? /** @type {?} */ (timings) :\n        parseTimeExpression(/** @type {?} */ (timings), errors, allowNegativeValues);\n}\n/**\n * @param {?} exp\n * @param {?} errors\n * @param {?=} allowNegativeValues\n * @return {?}\n */\nfunction parseTimeExpression(exp, errors, allowNegativeValues) {\n    const /** @type {?} */ regex = /^(-?[\\.\\d]+)(m?s)(?:\\s+(-?[\\.\\d]+)(m?s))?(?:\\s+([-a-z]+(?:\\(.+?\\))?))?$/i;\n    let /** @type {?} */ duration;\n    let /** @type {?} */ delay = 0;\n    let /** @type {?} */ easing = '';\n    if (typeof exp === 'string') {\n        const /** @type {?} */ matches = exp.match(regex);\n        if (matches === null) {\n            errors.push(`The provided timing value \"${exp}\" is invalid.`);\n            return { duration: 0, delay: 0, easing: '' };\n        }\n        duration = _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);\n        const /** @type {?} */ delayMatch = matches[3];\n        if (delayMatch != null) {\n            delay = _convertTimeValueToMS(Math.floor(parseFloat(delayMatch)), matches[4]);\n        }\n        const /** @type {?} */ easingVal = matches[5];\n        if (easingVal) {\n            easing = easingVal;\n        }\n    }\n    else {\n        duration = /** @type {?} */ (exp);\n    }\n    if (!allowNegativeValues) {\n        let /** @type {?} */ containsErrors = false;\n        let /** @type {?} */ startIndex = errors.length;\n        if (duration < 0) {\n            errors.push(`Duration values below 0 are not allowed for this animation step.`);\n            containsErrors = true;\n        }\n        if (delay < 0) {\n            errors.push(`Delay values below 0 are not allowed for this animation step.`);\n            containsErrors = true;\n        }\n        if (containsErrors) {\n            errors.splice(startIndex, 0, `The provided timing value \"${exp}\" is invalid.`);\n        }\n    }\n    return { duration, delay, easing };\n}\n/**\n * @param {?} obj\n * @param {?=} destination\n * @return {?}\n */\nfunction copyObj(obj, destination = {}) {\n    Object.keys(obj).forEach(prop => { destination[prop] = obj[prop]; });\n    return destination;\n}\n/**\n * @param {?} styles\n * @return {?}\n */\nfunction normalizeStyles(styles) {\n    const /** @type {?} */ normalizedStyles = {};\n    if (Array.isArray(styles)) {\n        styles.forEach(data => copyStyles(data, false, normalizedStyles));\n    }\n    else {\n        copyStyles(styles, false, normalizedStyles);\n    }\n    return normalizedStyles;\n}\n/**\n * @param {?} styles\n * @param {?} readPrototype\n * @param {?=} destination\n * @return {?}\n */\nfunction copyStyles(styles, readPrototype, destination = {}) {\n    if (readPrototype) {\n        // we make use of a for-in loop so that the\n        // prototypically inherited properties are\n        // revealed from the backFill map\n        for (let /** @type {?} */ prop in styles) {\n            destination[prop] = styles[prop];\n        }\n    }\n    else {\n        copyObj(styles, destination);\n    }\n    return destination;\n}\n/**\n * @param {?} element\n * @param {?} styles\n * @return {?}\n */\nfunction setStyles(element, styles) {\n    if (element['style']) {\n        Object.keys(styles).forEach(prop => {\n            const /** @type {?} */ camelProp = dashCaseToCamelCase(prop);\n            element.style[camelProp] = styles[prop];\n        });\n    }\n}\n/**\n * @param {?} element\n * @param {?} styles\n * @return {?}\n */\nfunction eraseStyles(element, styles) {\n    if (element['style']) {\n        Object.keys(styles).forEach(prop => {\n            const /** @type {?} */ camelProp = dashCaseToCamelCase(prop);\n            element.style[camelProp] = '';\n        });\n    }\n}\n/**\n * @param {?} steps\n * @return {?}\n */\nfunction normalizeAnimationEntry(steps) {\n    if (Array.isArray(steps)) {\n        if (steps.length == 1)\n            return steps[0];\n        return sequence(steps);\n    }\n    return /** @type {?} */ (steps);\n}\n/**\n * @param {?} value\n * @param {?} options\n * @param {?} errors\n * @return {?}\n */\nfunction validateStyleParams(value, options, errors) {\n    const /** @type {?} */ params = options.params || {};\n    const /** @type {?} */ matches = extractStyleParams(value);\n    if (matches.length) {\n        matches.forEach(varName => {\n            if (!params.hasOwnProperty(varName)) {\n                errors.push(`Unable to resolve the local animation param ${varName} in the given list of values`);\n            }\n        });\n    }\n}\nconst PARAM_REGEX = new RegExp(`${SUBSTITUTION_EXPR_START}\\\\s*(.+?)\\\\s*${SUBSTITUTION_EXPR_END}`, 'g');\n/**\n * @param {?} value\n * @return {?}\n */\nfunction extractStyleParams(value) {\n    let /** @type {?} */ params = [];\n    if (typeof value === 'string') {\n        const /** @type {?} */ val = value.toString();\n        let /** @type {?} */ match;\n        while (match = PARAM_REGEX.exec(val)) {\n            params.push(/** @type {?} */ (match[1]));\n        }\n        PARAM_REGEX.lastIndex = 0;\n    }\n    return params;\n}\n/**\n * @param {?} value\n * @param {?} params\n * @param {?} errors\n * @return {?}\n */\nfunction interpolateParams(value, params, errors) {\n    const /** @type {?} */ original = value.toString();\n    const /** @type {?} */ str = original.replace(PARAM_REGEX, (_, varName) => {\n        let /** @type {?} */ localVal = params[varName];\n        // this means that the value was never overidden by the data passed in by the user\n        if (!params.hasOwnProperty(varName)) {\n            errors.push(`Please provide a value for the animation param ${varName}`);\n            localVal = '';\n        }\n        return localVal.toString();\n    });\n    // we do this to assert that numeric values stay as they are\n    return str == original ? value : str;\n}\n/**\n * @param {?} iterator\n * @return {?}\n */\nfunction iteratorToArray(iterator) {\n    const /** @type {?} */ arr = [];\n    let /** @type {?} */ item = iterator.next();\n    while (!item.done) {\n        arr.push(item.value);\n        item = iterator.next();\n    }\n    return arr;\n}\n/**\n * @param {?} source\n * @param {?} destination\n * @return {?}\n */\n\nconst DASH_CASE_REGEXP = /-+([a-z0-9])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction dashCaseToCamelCase(input) {\n    return input.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());\n}\n/**\n * @param {?} duration\n * @param {?} delay\n * @return {?}\n */\nfunction allowPreviousPlayerStylesMerge(duration, delay) {\n    return duration === 0 || delay === 0;\n}\n/**\n * @param {?} visitor\n * @param {?} node\n * @param {?} context\n * @return {?}\n */\nfunction visitDslNode(visitor, node, context) {\n    switch (node.type) {\n        case 7 /* Trigger */:\n            return visitor.visitTrigger(node, context);\n        case 0 /* State */:\n            return visitor.visitState(node, context);\n        case 1 /* Transition */:\n            return visitor.visitTransition(node, context);\n        case 2 /* Sequence */:\n            return visitor.visitSequence(node, context);\n        case 3 /* Group */:\n            return visitor.visitGroup(node, context);\n        case 4 /* Animate */:\n            return visitor.visitAnimate(node, context);\n        case 5 /* Keyframes */:\n            return visitor.visitKeyframes(node, context);\n        case 6 /* Style */:\n            return visitor.visitStyle(node, context);\n        case 8 /* Reference */:\n            return visitor.visitReference(node, context);\n        case 9 /* AnimateChild */:\n            return visitor.visitAnimateChild(node, context);\n        case 10 /* AnimateRef */:\n            return visitor.visitAnimateRef(node, context);\n        case 11 /* Query */:\n            return visitor.visitQuery(node, context);\n        case 12 /* Stagger */:\n            return visitor.visitStagger(node, context);\n        default:\n            throw new Error(`Unable to resolve animation metadata node #${node.type}`);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ANY_STATE = '*';\n/**\n * @param {?} transitionValue\n * @param {?} errors\n * @return {?}\n */\nfunction parseTransitionExpr(transitionValue, errors) {\n    const /** @type {?} */ expressions = [];\n    if (typeof transitionValue == 'string') {\n        (/** @type {?} */ (transitionValue))\n            .split(/\\s*,\\s*/)\n            .forEach(str => parseInnerTransitionStr(str, expressions, errors));\n    }\n    else {\n        expressions.push(/** @type {?} */ (transitionValue));\n    }\n    return expressions;\n}\n/**\n * @param {?} eventStr\n * @param {?} expressions\n * @param {?} errors\n * @return {?}\n */\nfunction parseInnerTransitionStr(eventStr, expressions, errors) {\n    if (eventStr[0] == ':') {\n        const /** @type {?} */ result = parseAnimationAlias(eventStr, errors);\n        if (typeof result == 'function') {\n            expressions.push(result);\n            return;\n        }\n        eventStr = /** @type {?} */ (result);\n    }\n    const /** @type {?} */ match = eventStr.match(/^(\\*|[-\\w]+)\\s*(<?[=-]>)\\s*(\\*|[-\\w]+)$/);\n    if (match == null || match.length < 4) {\n        errors.push(`The provided transition expression \"${eventStr}\" is not supported`);\n        return expressions;\n    }\n    const /** @type {?} */ fromState = match[1];\n    const /** @type {?} */ separator = match[2];\n    const /** @type {?} */ toState = match[3];\n    expressions.push(makeLambdaFromStates(fromState, toState));\n    const /** @type {?} */ isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;\n    if (separator[0] == '<' && !isFullAnyStateExpr) {\n        expressions.push(makeLambdaFromStates(toState, fromState));\n    }\n}\n/**\n * @param {?} alias\n * @param {?} errors\n * @return {?}\n */\nfunction parseAnimationAlias(alias, errors) {\n    switch (alias) {\n        case ':enter':\n            return 'void => *';\n        case ':leave':\n            return '* => void';\n        case ':increment':\n            return (fromState, toState) => parseFloat(toState) > parseFloat(fromState);\n        case ':decrement':\n            return (fromState, toState) => parseFloat(toState) < parseFloat(fromState);\n        default:\n            errors.push(`The transition alias value \"${alias}\" is not supported`);\n            return '* => *';\n    }\n}\n// DO NOT REFACTOR ... keep the follow set instantiations\n// with the values intact (closure compiler for some reason\n// removes follow-up lines that add the values outside of\n// the constructor...\nconst TRUE_BOOLEAN_VALUES = new Set(['true', '1']);\nconst FALSE_BOOLEAN_VALUES = new Set(['false', '0']);\n/**\n * @param {?} lhs\n * @param {?} rhs\n * @return {?}\n */\nfunction makeLambdaFromStates(lhs, rhs) {\n    const /** @type {?} */ LHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(lhs) || FALSE_BOOLEAN_VALUES.has(lhs);\n    const /** @type {?} */ RHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(rhs) || FALSE_BOOLEAN_VALUES.has(rhs);\n    return (fromState, toState) => {\n        let /** @type {?} */ lhsMatch = lhs == ANY_STATE || lhs == fromState;\n        let /** @type {?} */ rhsMatch = rhs == ANY_STATE || rhs == toState;\n        if (!lhsMatch && LHS_MATCH_BOOLEAN && typeof fromState === 'boolean') {\n            lhsMatch = fromState ? TRUE_BOOLEAN_VALUES.has(lhs) : FALSE_BOOLEAN_VALUES.has(lhs);\n        }\n        if (!rhsMatch && RHS_MATCH_BOOLEAN && typeof toState === 'boolean') {\n            rhsMatch = toState ? TRUE_BOOLEAN_VALUES.has(rhs) : FALSE_BOOLEAN_VALUES.has(rhs);\n        }\n        return lhsMatch && rhsMatch;\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst SELF_TOKEN = ':self';\nconst SELF_TOKEN_REGEX = new RegExp(`\\s*${SELF_TOKEN}\\s*,?`, 'g');\n/**\n * @param {?} driver\n * @param {?} metadata\n * @param {?} errors\n * @return {?}\n */\nfunction buildAnimationAst(driver, metadata, errors) {\n    return new AnimationAstBuilderVisitor(driver).build(metadata, errors);\n}\nconst ROOT_SELECTOR = '';\nclass AnimationAstBuilderVisitor {\n    /**\n     * @param {?} _driver\n     */\n    constructor(_driver) {\n        this._driver = _driver;\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} errors\n     * @return {?}\n     */\n    build(metadata, errors) {\n        const /** @type {?} */ context = new AnimationAstBuilderContext(errors);\n        this._resetContextStyleTimingState(context);\n        return /** @type {?} */ (visitDslNode(this, normalizeAnimationEntry(metadata), context));\n    }\n    /**\n     * @param {?} context\n     * @return {?}\n     */\n    _resetContextStyleTimingState(context) {\n        context.currentQuerySelector = ROOT_SELECTOR;\n        context.collectedStyles = {};\n        context.collectedStyles[ROOT_SELECTOR] = {};\n        context.currentTime = 0;\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitTrigger(metadata, context) {\n        let /** @type {?} */ queryCount = context.queryCount = 0;\n        let /** @type {?} */ depCount = context.depCount = 0;\n        const /** @type {?} */ states = [];\n        const /** @type {?} */ transitions = [];\n        if (metadata.name.charAt(0) == '@') {\n            context.errors.push('animation triggers cannot be prefixed with an `@` sign (e.g. trigger(\\'@foo\\', [...]))');\n        }\n        metadata.definitions.forEach(def => {\n            this._resetContextStyleTimingState(context);\n            if (def.type == 0 /* State */) {\n                const /** @type {?} */ stateDef = /** @type {?} */ (def);\n                const /** @type {?} */ name = stateDef.name;\n                name.split(/\\s*,\\s*/).forEach(n => {\n                    stateDef.name = n;\n                    states.push(this.visitState(stateDef, context));\n                });\n                stateDef.name = name;\n            }\n            else if (def.type == 1 /* Transition */) {\n                const /** @type {?} */ transition = this.visitTransition(/** @type {?} */ (def), context);\n                queryCount += transition.queryCount;\n                depCount += transition.depCount;\n                transitions.push(transition);\n            }\n            else {\n                context.errors.push('only state() and transition() definitions can sit inside of a trigger()');\n            }\n        });\n        return {\n            type: 7 /* Trigger */,\n            name: metadata.name, states, transitions, queryCount, depCount,\n            options: null\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitState(metadata, context) {\n        const /** @type {?} */ styleAst = this.visitStyle(metadata.styles, context);\n        const /** @type {?} */ astParams = (metadata.options && metadata.options.params) || null;\n        if (styleAst.containsDynamicStyles) {\n            const /** @type {?} */ missingSubs = new Set();\n            const /** @type {?} */ params = astParams || {};\n            styleAst.styles.forEach(value => {\n                if (isObject(value)) {\n                    const /** @type {?} */ stylesObj = /** @type {?} */ (value);\n                    Object.keys(stylesObj).forEach(prop => {\n                        extractStyleParams(stylesObj[prop]).forEach(sub => {\n                            if (!params.hasOwnProperty(sub)) {\n                                missingSubs.add(sub);\n                            }\n                        });\n                    });\n                }\n            });\n            if (missingSubs.size) {\n                const /** @type {?} */ missingSubsArr = iteratorToArray(missingSubs.values());\n                context.errors.push(`state(\"${metadata.name}\", ...) must define default values for all the following style substitutions: ${missingSubsArr.join(', ')}`);\n            }\n        }\n        return {\n            type: 0 /* State */,\n            name: metadata.name,\n            style: styleAst,\n            options: astParams ? { params: astParams } : null\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitTransition(metadata, context) {\n        context.queryCount = 0;\n        context.depCount = 0;\n        const /** @type {?} */ animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);\n        const /** @type {?} */ matchers = parseTransitionExpr(metadata.expr, context.errors);\n        return {\n            type: 1 /* Transition */,\n            matchers,\n            animation,\n            queryCount: context.queryCount,\n            depCount: context.depCount,\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitSequence(metadata, context) {\n        return {\n            type: 2 /* Sequence */,\n            steps: metadata.steps.map(s => visitDslNode(this, s, context)),\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitGroup(metadata, context) {\n        const /** @type {?} */ currentTime = context.currentTime;\n        let /** @type {?} */ furthestTime = 0;\n        const /** @type {?} */ steps = metadata.steps.map(step => {\n            context.currentTime = currentTime;\n            const /** @type {?} */ innerAst = visitDslNode(this, step, context);\n            furthestTime = Math.max(furthestTime, context.currentTime);\n            return innerAst;\n        });\n        context.currentTime = furthestTime;\n        return {\n            type: 3 /* Group */,\n            steps,\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitAnimate(metadata, context) {\n        const /** @type {?} */ timingAst = constructTimingAst(metadata.timings, context.errors);\n        context.currentAnimateTimings = timingAst;\n        let /** @type {?} */ styleAst;\n        let /** @type {?} */ styleMetadata = metadata.styles ? metadata.styles : style({});\n        if (styleMetadata.type == 5 /* Keyframes */) {\n            styleAst = this.visitKeyframes(/** @type {?} */ (styleMetadata), context);\n        }\n        else {\n            let /** @type {?} */ styleMetadata = /** @type {?} */ (metadata.styles);\n            let /** @type {?} */ isEmpty = false;\n            if (!styleMetadata) {\n                isEmpty = true;\n                const /** @type {?} */ newStyleData = {};\n                if (timingAst.easing) {\n                    newStyleData['easing'] = timingAst.easing;\n                }\n                styleMetadata = style(newStyleData);\n            }\n            context.currentTime += timingAst.duration + timingAst.delay;\n            const /** @type {?} */ _styleAst = this.visitStyle(styleMetadata, context);\n            _styleAst.isEmptyStep = isEmpty;\n            styleAst = _styleAst;\n        }\n        context.currentAnimateTimings = null;\n        return {\n            type: 4 /* Animate */,\n            timings: timingAst,\n            style: styleAst,\n            options: null\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitStyle(metadata, context) {\n        const /** @type {?} */ ast = this._makeStyleAst(metadata, context);\n        this._validateStyleAst(ast, context);\n        return ast;\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    _makeStyleAst(metadata, context) {\n        const /** @type {?} */ styles = [];\n        if (Array.isArray(metadata.styles)) {\n            (/** @type {?} */ (metadata.styles)).forEach(styleTuple => {\n                if (typeof styleTuple == 'string') {\n                    if (styleTuple == AUTO_STYLE) {\n                        styles.push(/** @type {?} */ (styleTuple));\n                    }\n                    else {\n                        context.errors.push(`The provided style string value ${styleTuple} is not allowed.`);\n                    }\n                }\n                else {\n                    styles.push(/** @type {?} */ (styleTuple));\n                }\n            });\n        }\n        else {\n            styles.push(metadata.styles);\n        }\n        let /** @type {?} */ containsDynamicStyles = false;\n        let /** @type {?} */ collectedEasing = null;\n        styles.forEach(styleData => {\n            if (isObject(styleData)) {\n                const /** @type {?} */ styleMap = /** @type {?} */ (styleData);\n                const /** @type {?} */ easing = styleMap['easing'];\n                if (easing) {\n                    collectedEasing = /** @type {?} */ (easing);\n                    delete styleMap['easing'];\n                }\n                if (!containsDynamicStyles) {\n                    for (let /** @type {?} */ prop in styleMap) {\n                        const /** @type {?} */ value = styleMap[prop];\n                        if (value.toString().indexOf(SUBSTITUTION_EXPR_START) >= 0) {\n                            containsDynamicStyles = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        });\n        return {\n            type: 6 /* Style */,\n            styles,\n            easing: collectedEasing,\n            offset: metadata.offset, containsDynamicStyles,\n            options: null\n        };\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    _validateStyleAst(ast, context) {\n        const /** @type {?} */ timings = context.currentAnimateTimings;\n        let /** @type {?} */ endTime = context.currentTime;\n        let /** @type {?} */ startTime = context.currentTime;\n        if (timings && startTime > 0) {\n            startTime -= timings.duration + timings.delay;\n        }\n        ast.styles.forEach(tuple => {\n            if (typeof tuple == 'string')\n                return;\n            Object.keys(tuple).forEach(prop => {\n                if (!this._driver.validateStyleProperty(prop)) {\n                    context.errors.push(`The provided animation property \"${prop}\" is not a supported CSS property for animations`);\n                    return;\n                }\n                const /** @type {?} */ collectedStyles = context.collectedStyles[/** @type {?} */ ((context.currentQuerySelector))];\n                const /** @type {?} */ collectedEntry = collectedStyles[prop];\n                let /** @type {?} */ updateCollectedStyle = true;\n                if (collectedEntry) {\n                    if (startTime != endTime && startTime >= collectedEntry.startTime &&\n                        endTime <= collectedEntry.endTime) {\n                        context.errors.push(`The CSS property \"${prop}\" that exists between the times of \"${collectedEntry.startTime}ms\" and \"${collectedEntry.endTime}ms\" is also being animated in a parallel animation between the times of \"${startTime}ms\" and \"${endTime}ms\"`);\n                        updateCollectedStyle = false;\n                    }\n                    // we always choose the smaller start time value since we\n                    // want to have a record of the entire animation window where\n                    // the style property is being animated in between\n                    startTime = collectedEntry.startTime;\n                }\n                if (updateCollectedStyle) {\n                    collectedStyles[prop] = { startTime, endTime };\n                }\n                if (context.options) {\n                    validateStyleParams(tuple[prop], context.options, context.errors);\n                }\n            });\n        });\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitKeyframes(metadata, context) {\n        const /** @type {?} */ ast = { type: 5 /* Keyframes */, styles: [], options: null };\n        if (!context.currentAnimateTimings) {\n            context.errors.push(`keyframes() must be placed inside of a call to animate()`);\n            return ast;\n        }\n        const /** @type {?} */ MAX_KEYFRAME_OFFSET = 1;\n        let /** @type {?} */ totalKeyframesWithOffsets = 0;\n        const /** @type {?} */ offsets = [];\n        let /** @type {?} */ offsetsOutOfOrder = false;\n        let /** @type {?} */ keyframesOutOfRange = false;\n        let /** @type {?} */ previousOffset = 0;\n        const /** @type {?} */ keyframes = metadata.steps.map(styles => {\n            const /** @type {?} */ style$$1 = this._makeStyleAst(styles, context);\n            let /** @type {?} */ offsetVal = style$$1.offset != null ? style$$1.offset : consumeOffset(style$$1.styles);\n            let /** @type {?} */ offset = 0;\n            if (offsetVal != null) {\n                totalKeyframesWithOffsets++;\n                offset = style$$1.offset = offsetVal;\n            }\n            keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;\n            offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;\n            previousOffset = offset;\n            offsets.push(offset);\n            return style$$1;\n        });\n        if (keyframesOutOfRange) {\n            context.errors.push(`Please ensure that all keyframe offsets are between 0 and 1`);\n        }\n        if (offsetsOutOfOrder) {\n            context.errors.push(`Please ensure that all keyframe offsets are in order`);\n        }\n        const /** @type {?} */ length = metadata.steps.length;\n        let /** @type {?} */ generatedOffset = 0;\n        if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {\n            context.errors.push(`Not all style() steps within the declared keyframes() contain offsets`);\n        }\n        else if (totalKeyframesWithOffsets == 0) {\n            generatedOffset = MAX_KEYFRAME_OFFSET / (length - 1);\n        }\n        const /** @type {?} */ limit = length - 1;\n        const /** @type {?} */ currentTime = context.currentTime;\n        const /** @type {?} */ currentAnimateTimings = /** @type {?} */ ((context.currentAnimateTimings));\n        const /** @type {?} */ animateDuration = currentAnimateTimings.duration;\n        keyframes.forEach((kf, i) => {\n            const /** @type {?} */ offset = generatedOffset > 0 ? (i == limit ? 1 : (generatedOffset * i)) : offsets[i];\n            const /** @type {?} */ durationUpToThisFrame = offset * animateDuration;\n            context.currentTime = currentTime + currentAnimateTimings.delay + durationUpToThisFrame;\n            currentAnimateTimings.duration = durationUpToThisFrame;\n            this._validateStyleAst(kf, context);\n            kf.offset = offset;\n            ast.styles.push(kf);\n        });\n        return ast;\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitReference(metadata, context) {\n        return {\n            type: 8 /* Reference */,\n            animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitAnimateChild(metadata, context) {\n        context.depCount++;\n        return {\n            type: 9 /* AnimateChild */,\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitAnimateRef(metadata, context) {\n        return {\n            type: 10 /* AnimateRef */,\n            animation: this.visitReference(metadata.animation, context),\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitQuery(metadata, context) {\n        const /** @type {?} */ parentSelector = /** @type {?} */ ((context.currentQuerySelector));\n        const /** @type {?} */ options = /** @type {?} */ ((metadata.options || {}));\n        context.queryCount++;\n        context.currentQuery = metadata;\n        const [selector, includeSelf] = normalizeSelector(metadata.selector);\n        context.currentQuerySelector =\n            parentSelector.length ? (parentSelector + ' ' + selector) : selector;\n        getOrSetAsInMap(context.collectedStyles, context.currentQuerySelector, {});\n        const /** @type {?} */ animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);\n        context.currentQuery = null;\n        context.currentQuerySelector = parentSelector;\n        return {\n            type: 11 /* Query */,\n            selector,\n            limit: options.limit || 0,\n            optional: !!options.optional, includeSelf, animation,\n            originalSelector: metadata.selector,\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitStagger(metadata, context) {\n        if (!context.currentQuery) {\n            context.errors.push(`stagger() can only be used inside of query()`);\n        }\n        const /** @type {?} */ timings = metadata.timings === 'full' ?\n            { duration: 0, delay: 0, easing: 'full' } :\n            resolveTiming(metadata.timings, context.errors, true);\n        return {\n            type: 12 /* Stagger */,\n            animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context), timings,\n            options: null\n        };\n    }\n}\n/**\n * @param {?} selector\n * @return {?}\n */\nfunction normalizeSelector(selector) {\n    const /** @type {?} */ hasAmpersand = selector.split(/\\s*,\\s*/).find(token => token == SELF_TOKEN) ? true : false;\n    if (hasAmpersand) {\n        selector = selector.replace(SELF_TOKEN_REGEX, '');\n    }\n    // the :enter and :leave selectors are filled in at runtime during timeline building\n    selector = selector.replace(/@\\*/g, NG_TRIGGER_SELECTOR)\n        .replace(/@\\w+/g, match => NG_TRIGGER_SELECTOR + '-' + match.substr(1))\n        .replace(/:animating/g, NG_ANIMATING_SELECTOR);\n    return [selector, hasAmpersand];\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction normalizeParams(obj) {\n    return obj ? copyObj(obj) : null;\n}\nclass AnimationAstBuilderContext {\n    /**\n     * @param {?} errors\n     */\n    constructor(errors) {\n        this.errors = errors;\n        this.queryCount = 0;\n        this.depCount = 0;\n        this.currentTransition = null;\n        this.currentQuery = null;\n        this.currentQuerySelector = null;\n        this.currentAnimateTimings = null;\n        this.currentTime = 0;\n        this.collectedStyles = {};\n        this.options = null;\n    }\n}\n/**\n * @param {?} styles\n * @return {?}\n */\nfunction consumeOffset(styles) {\n    if (typeof styles == 'string')\n        return null;\n    let /** @type {?} */ offset = null;\n    if (Array.isArray(styles)) {\n        styles.forEach(styleTuple => {\n            if (isObject(styleTuple) && styleTuple.hasOwnProperty('offset')) {\n                const /** @type {?} */ obj = /** @type {?} */ (styleTuple);\n                offset = parseFloat(/** @type {?} */ (obj['offset']));\n                delete obj['offset'];\n            }\n        });\n    }\n    else if (isObject(styles) && styles.hasOwnProperty('offset')) {\n        const /** @type {?} */ obj = /** @type {?} */ (styles);\n        offset = parseFloat(/** @type {?} */ (obj['offset']));\n        delete obj['offset'];\n    }\n    return offset;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isObject(value) {\n    return !Array.isArray(value) && typeof value == 'object';\n}\n/**\n * @param {?} value\n * @param {?} errors\n * @return {?}\n */\nfunction constructTimingAst(value, errors) {\n    let /** @type {?} */ timings = null;\n    if (value.hasOwnProperty('duration')) {\n        timings = /** @type {?} */ (value);\n    }\n    else if (typeof value == 'number') {\n        const /** @type {?} */ duration = resolveTiming(/** @type {?} */ (value), errors).duration;\n        return makeTimingAst(/** @type {?} */ (duration), 0, '');\n    }\n    const /** @type {?} */ strValue = /** @type {?} */ (value);\n    const /** @type {?} */ isDynamic = strValue.split(/\\s+/).some(v => v.charAt(0) == '{' && v.charAt(1) == '{');\n    if (isDynamic) {\n        const /** @type {?} */ ast = /** @type {?} */ (makeTimingAst(0, 0, ''));\n        ast.dynamic = true;\n        ast.strValue = strValue;\n        return /** @type {?} */ (ast);\n    }\n    timings = timings || resolveTiming(strValue, errors);\n    return makeTimingAst(timings.duration, timings.delay, timings.easing);\n}\n/**\n * @param {?} options\n * @return {?}\n */\nfunction normalizeAnimationOptions(options) {\n    if (options) {\n        options = copyObj(options);\n        if (options['params']) {\n            options['params'] = /** @type {?} */ ((normalizeParams(options['params'])));\n        }\n    }\n    else {\n        options = {};\n    }\n    return options;\n}\n/**\n * @param {?} duration\n * @param {?} delay\n * @param {?} easing\n * @return {?}\n */\nfunction makeTimingAst(duration, delay, easing) {\n    return { duration, delay, easing };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @record\n */\n\n/**\n * @param {?} element\n * @param {?} keyframes\n * @param {?} preStyleProps\n * @param {?} postStyleProps\n * @param {?} duration\n * @param {?} delay\n * @param {?=} easing\n * @param {?=} subTimeline\n * @return {?}\n */\nfunction createTimelineInstruction(element, keyframes, preStyleProps, postStyleProps, duration, delay, easing = null, subTimeline = false) {\n    return {\n        type: 1 /* TimelineAnimation */,\n        element,\n        keyframes,\n        preStyleProps,\n        postStyleProps,\n        duration,\n        delay,\n        totalTime: duration + delay, easing, subTimeline\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass ElementInstructionMap {\n    constructor() {\n        this._map = new Map();\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    consume(element) {\n        let /** @type {?} */ instructions = this._map.get(element);\n        if (instructions) {\n            this._map.delete(element);\n        }\n        else {\n            instructions = [];\n        }\n        return instructions;\n    }\n    /**\n     * @param {?} element\n     * @param {?} instructions\n     * @return {?}\n     */\n    append(element, instructions) {\n        let /** @type {?} */ existingInstructions = this._map.get(element);\n        if (!existingInstructions) {\n            this._map.set(element, existingInstructions = []);\n        }\n        existingInstructions.push(...instructions);\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    has(element) { return this._map.has(element); }\n    /**\n     * @return {?}\n     */\n    clear() { this._map.clear(); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst ONE_FRAME_IN_MILLISECONDS = 1;\nconst ENTER_TOKEN = ':enter';\nconst ENTER_TOKEN_REGEX = new RegExp(ENTER_TOKEN, 'g');\nconst LEAVE_TOKEN = ':leave';\nconst LEAVE_TOKEN_REGEX = new RegExp(LEAVE_TOKEN, 'g');\n/**\n * @param {?} driver\n * @param {?} rootElement\n * @param {?} ast\n * @param {?} enterClassName\n * @param {?} leaveClassName\n * @param {?=} startingStyles\n * @param {?=} finalStyles\n * @param {?=} options\n * @param {?=} subInstructions\n * @param {?=} errors\n * @return {?}\n */\nfunction buildAnimationTimelines(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles = {}, finalStyles = {}, options, subInstructions, errors = []) {\n    return new AnimationTimelineBuilderVisitor().buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors);\n}\nclass AnimationTimelineBuilderVisitor {\n    /**\n     * @param {?} driver\n     * @param {?} rootElement\n     * @param {?} ast\n     * @param {?} enterClassName\n     * @param {?} leaveClassName\n     * @param {?} startingStyles\n     * @param {?} finalStyles\n     * @param {?} options\n     * @param {?=} subInstructions\n     * @param {?=} errors\n     * @return {?}\n     */\n    buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors = []) {\n        subInstructions = subInstructions || new ElementInstructionMap();\n        const /** @type {?} */ context = new AnimationTimelineContext(driver, rootElement, subInstructions, enterClassName, leaveClassName, errors, []);\n        context.options = options;\n        context.currentTimeline.setStyles([startingStyles], null, context.errors, options);\n        visitDslNode(this, ast, context);\n        // this checks to see if an actual animation happened\n        const /** @type {?} */ timelines = context.timelines.filter(timeline => timeline.containsAnimation());\n        if (timelines.length && Object.keys(finalStyles).length) {\n            const /** @type {?} */ tl = timelines[timelines.length - 1];\n            if (!tl.allowOnlyTimelineStyles()) {\n                tl.setStyles([finalStyles], null, context.errors, options);\n            }\n        }\n        return timelines.length ? timelines.map(timeline => timeline.buildKeyframes()) :\n            [createTimelineInstruction(rootElement, [], [], [], 0, 0, '', false)];\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitTrigger(ast, context) {\n        // these values are not visited in this AST\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitState(ast, context) {\n        // these values are not visited in this AST\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitTransition(ast, context) {\n        // these values are not visited in this AST\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitAnimateChild(ast, context) {\n        const /** @type {?} */ elementInstructions = context.subInstructions.consume(context.element);\n        if (elementInstructions) {\n            const /** @type {?} */ innerContext = context.createSubContext(ast.options);\n            const /** @type {?} */ startTime = context.currentTimeline.currentTime;\n            const /** @type {?} */ endTime = this._visitSubInstructions(elementInstructions, innerContext, /** @type {?} */ (innerContext.options));\n            if (startTime != endTime) {\n                // we do this on the upper context because we created a sub context for\n                // the sub child animations\n                context.transformIntoNewTimeline(endTime);\n            }\n        }\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitAnimateRef(ast, context) {\n        const /** @type {?} */ innerContext = context.createSubContext(ast.options);\n        innerContext.transformIntoNewTimeline();\n        this.visitReference(ast.animation, innerContext);\n        context.transformIntoNewTimeline(innerContext.currentTimeline.currentTime);\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} instructions\n     * @param {?} context\n     * @param {?} options\n     * @return {?}\n     */\n    _visitSubInstructions(instructions, context, options) {\n        const /** @type {?} */ startTime = context.currentTimeline.currentTime;\n        let /** @type {?} */ furthestTime = startTime;\n        // this is a special-case for when a user wants to skip a sub\n        // animation from being fired entirely.\n        const /** @type {?} */ duration = options.duration != null ? resolveTimingValue(options.duration) : null;\n        const /** @type {?} */ delay = options.delay != null ? resolveTimingValue(options.delay) : null;\n        if (duration !== 0) {\n            instructions.forEach(instruction => {\n                const /** @type {?} */ instructionTimings = context.appendInstructionToTimeline(instruction, duration, delay);\n                furthestTime =\n                    Math.max(furthestTime, instructionTimings.duration + instructionTimings.delay);\n            });\n        }\n        return furthestTime;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitReference(ast, context) {\n        context.updateOptions(ast.options, true);\n        visitDslNode(this, ast.animation, context);\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitSequence(ast, context) {\n        const /** @type {?} */ subContextCount = context.subContextCount;\n        let /** @type {?} */ ctx = context;\n        const /** @type {?} */ options = ast.options;\n        if (options && (options.params || options.delay)) {\n            ctx = context.createSubContext(options);\n            ctx.transformIntoNewTimeline();\n            if (options.delay != null) {\n                if (ctx.previousNode.type == 6 /* Style */) {\n                    ctx.currentTimeline.snapshotCurrentStyles();\n                    ctx.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;\n                }\n                const /** @type {?} */ delay = resolveTimingValue(options.delay);\n                ctx.delayNextStep(delay);\n            }\n        }\n        if (ast.steps.length) {\n            ast.steps.forEach(s => visitDslNode(this, s, ctx));\n            // this is here just incase the inner steps only contain or end with a style() call\n            ctx.currentTimeline.applyStylesToKeyframe();\n            // this means that some animation function within the sequence\n            // ended up creating a sub timeline (which means the current\n            // timeline cannot overlap with the contents of the sequence)\n            if (ctx.subContextCount > subContextCount) {\n                ctx.transformIntoNewTimeline();\n            }\n        }\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitGroup(ast, context) {\n        const /** @type {?} */ innerTimelines = [];\n        let /** @type {?} */ furthestTime = context.currentTimeline.currentTime;\n        const /** @type {?} */ delay = ast.options && ast.options.delay ? resolveTimingValue(ast.options.delay) : 0;\n        ast.steps.forEach(s => {\n            const /** @type {?} */ innerContext = context.createSubContext(ast.options);\n            if (delay) {\n                innerContext.delayNextStep(delay);\n            }\n            visitDslNode(this, s, innerContext);\n            furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);\n            innerTimelines.push(innerContext.currentTimeline);\n        });\n        // this operation is run after the AST loop because otherwise\n        // if the parent timeline's collected styles were updated then\n        // it would pass in invalid data into the new-to-be forked items\n        innerTimelines.forEach(timeline => context.currentTimeline.mergeTimelineCollectedStyles(timeline));\n        context.transformIntoNewTimeline(furthestTime);\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    _visitTiming(ast, context) {\n        if ((/** @type {?} */ (ast)).dynamic) {\n            const /** @type {?} */ strValue = (/** @type {?} */ (ast)).strValue;\n            const /** @type {?} */ timingValue = context.params ? interpolateParams(strValue, context.params, context.errors) : strValue;\n            return resolveTiming(timingValue, context.errors);\n        }\n        else {\n            return { duration: ast.duration, delay: ast.delay, easing: ast.easing };\n        }\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitAnimate(ast, context) {\n        const /** @type {?} */ timings = context.currentAnimateTimings = this._visitTiming(ast.timings, context);\n        const /** @type {?} */ timeline = context.currentTimeline;\n        if (timings.delay) {\n            context.incrementTime(timings.delay);\n            timeline.snapshotCurrentStyles();\n        }\n        const /** @type {?} */ style$$1 = ast.style;\n        if (style$$1.type == 5 /* Keyframes */) {\n            this.visitKeyframes(style$$1, context);\n        }\n        else {\n            context.incrementTime(timings.duration);\n            this.visitStyle(/** @type {?} */ (style$$1), context);\n            timeline.applyStylesToKeyframe();\n        }\n        context.currentAnimateTimings = null;\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitStyle(ast, context) {\n        const /** @type {?} */ timeline = context.currentTimeline;\n        const /** @type {?} */ timings = /** @type {?} */ ((context.currentAnimateTimings));\n        // this is a special case for when a style() call\n        // directly follows  an animate() call (but not inside of an animate() call)\n        if (!timings && timeline.getCurrentStyleProperties().length) {\n            timeline.forwardFrame();\n        }\n        const /** @type {?} */ easing = (timings && timings.easing) || ast.easing;\n        if (ast.isEmptyStep) {\n            timeline.applyEmptyStep(easing);\n        }\n        else {\n            timeline.setStyles(ast.styles, easing, context.errors, context.options);\n        }\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitKeyframes(ast, context) {\n        const /** @type {?} */ currentAnimateTimings = /** @type {?} */ ((context.currentAnimateTimings));\n        const /** @type {?} */ startTime = (/** @type {?} */ ((context.currentTimeline))).duration;\n        const /** @type {?} */ duration = currentAnimateTimings.duration;\n        const /** @type {?} */ innerContext = context.createSubContext();\n        const /** @type {?} */ innerTimeline = innerContext.currentTimeline;\n        innerTimeline.easing = currentAnimateTimings.easing;\n        ast.styles.forEach(step => {\n            const /** @type {?} */ offset = step.offset || 0;\n            innerTimeline.forwardTime(offset * duration);\n            innerTimeline.setStyles(step.styles, step.easing, context.errors, context.options);\n            innerTimeline.applyStylesToKeyframe();\n        });\n        // this will ensure that the parent timeline gets all the styles from\n        // the child even if the new timeline below is not used\n        context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline);\n        // we do this because the window between this timeline and the sub timeline\n        // should ensure that the styles within are exactly the same as they were before\n        context.transformIntoNewTimeline(startTime + duration);\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitQuery(ast, context) {\n        // in the event that the first step before this is a style step we need\n        // to ensure the styles are applied before the children are animated\n        const /** @type {?} */ startTime = context.currentTimeline.currentTime;\n        const /** @type {?} */ options = /** @type {?} */ ((ast.options || {}));\n        const /** @type {?} */ delay = options.delay ? resolveTimingValue(options.delay) : 0;\n        if (delay && (context.previousNode.type === 6 /* Style */ ||\n            (startTime == 0 && context.currentTimeline.getCurrentStyleProperties().length))) {\n            context.currentTimeline.snapshotCurrentStyles();\n            context.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;\n        }\n        let /** @type {?} */ furthestTime = startTime;\n        const /** @type {?} */ elms = context.invokeQuery(ast.selector, ast.originalSelector, ast.limit, ast.includeSelf, options.optional ? true : false, context.errors);\n        context.currentQueryTotal = elms.length;\n        let /** @type {?} */ sameElementTimeline = null;\n        elms.forEach((element, i) => {\n            context.currentQueryIndex = i;\n            const /** @type {?} */ innerContext = context.createSubContext(ast.options, element);\n            if (delay) {\n                innerContext.delayNextStep(delay);\n            }\n            if (element === context.element) {\n                sameElementTimeline = innerContext.currentTimeline;\n            }\n            visitDslNode(this, ast.animation, innerContext);\n            // this is here just incase the inner steps only contain or end\n            // with a style() call (which is here to signal that this is a preparatory\n            // call to style an element before it is animated again)\n            innerContext.currentTimeline.applyStylesToKeyframe();\n            const /** @type {?} */ endTime = innerContext.currentTimeline.currentTime;\n            furthestTime = Math.max(furthestTime, endTime);\n        });\n        context.currentQueryIndex = 0;\n        context.currentQueryTotal = 0;\n        context.transformIntoNewTimeline(furthestTime);\n        if (sameElementTimeline) {\n            context.currentTimeline.mergeTimelineCollectedStyles(sameElementTimeline);\n            context.currentTimeline.snapshotCurrentStyles();\n        }\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitStagger(ast, context) {\n        const /** @type {?} */ parentContext = /** @type {?} */ ((context.parentContext));\n        const /** @type {?} */ tl = context.currentTimeline;\n        const /** @type {?} */ timings = ast.timings;\n        const /** @type {?} */ duration = Math.abs(timings.duration);\n        const /** @type {?} */ maxTime = duration * (context.currentQueryTotal - 1);\n        let /** @type {?} */ delay = duration * context.currentQueryIndex;\n        let /** @type {?} */ staggerTransformer = timings.duration < 0 ? 'reverse' : timings.easing;\n        switch (staggerTransformer) {\n            case 'reverse':\n                delay = maxTime - delay;\n                break;\n            case 'full':\n                delay = parentContext.currentStaggerTime;\n                break;\n        }\n        const /** @type {?} */ timeline = context.currentTimeline;\n        if (delay) {\n            timeline.delayNextStep(delay);\n        }\n        const /** @type {?} */ startingTime = timeline.currentTime;\n        visitDslNode(this, ast.animation, context);\n        context.previousNode = ast;\n        // time = duration + delay\n        // the reason why this computation is so complex is because\n        // the inner timeline may either have a delay value or a stretched\n        // keyframe depending on if a subtimeline is not used or is used.\n        parentContext.currentStaggerTime =\n            (tl.currentTime - startingTime) + (tl.startTime - parentContext.currentTimeline.startTime);\n    }\n}\nconst DEFAULT_NOOP_PREVIOUS_NODE = /** @type {?} */ ({});\nclass AnimationTimelineContext {\n    /**\n     * @param {?} _driver\n     * @param {?} element\n     * @param {?} subInstructions\n     * @param {?} _enterClassName\n     * @param {?} _leaveClassName\n     * @param {?} errors\n     * @param {?} timelines\n     * @param {?=} initialTimeline\n     */\n    constructor(_driver, element, subInstructions, _enterClassName, _leaveClassName, errors, timelines, initialTimeline) {\n        this._driver = _driver;\n        this.element = element;\n        this.subInstructions = subInstructions;\n        this._enterClassName = _enterClassName;\n        this._leaveClassName = _leaveClassName;\n        this.errors = errors;\n        this.timelines = timelines;\n        this.parentContext = null;\n        this.currentAnimateTimings = null;\n        this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;\n        this.subContextCount = 0;\n        this.options = {};\n        this.currentQueryIndex = 0;\n        this.currentQueryTotal = 0;\n        this.currentStaggerTime = 0;\n        this.currentTimeline = initialTimeline || new TimelineBuilder(this._driver, element, 0);\n        timelines.push(this.currentTimeline);\n    }\n    /**\n     * @return {?}\n     */\n    get params() { return this.options.params; }\n    /**\n     * @param {?} options\n     * @param {?=} skipIfExists\n     * @return {?}\n     */\n    updateOptions(options, skipIfExists) {\n        if (!options)\n            return;\n        const /** @type {?} */ newOptions = /** @type {?} */ (options);\n        let /** @type {?} */ optionsToUpdate = this.options;\n        // NOTE: this will get patched up when other animation methods support duration overrides\n        if (newOptions.duration != null) {\n            (/** @type {?} */ (optionsToUpdate)).duration = resolveTimingValue(newOptions.duration);\n        }\n        if (newOptions.delay != null) {\n            optionsToUpdate.delay = resolveTimingValue(newOptions.delay);\n        }\n        const /** @type {?} */ newParams = newOptions.params;\n        if (newParams) {\n            let /** @type {?} */ paramsToUpdate = /** @type {?} */ ((optionsToUpdate.params));\n            if (!paramsToUpdate) {\n                paramsToUpdate = this.options.params = {};\n            }\n            Object.keys(newParams).forEach(name => {\n                if (!skipIfExists || !paramsToUpdate.hasOwnProperty(name)) {\n                    paramsToUpdate[name] = interpolateParams(newParams[name], paramsToUpdate, this.errors);\n                }\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _copyOptions() {\n        const /** @type {?} */ options = {};\n        if (this.options) {\n            const /** @type {?} */ oldParams = this.options.params;\n            if (oldParams) {\n                const /** @type {?} */ params = options['params'] = {};\n                Object.keys(oldParams).forEach(name => { params[name] = oldParams[name]; });\n            }\n        }\n        return options;\n    }\n    /**\n     * @param {?=} options\n     * @param {?=} element\n     * @param {?=} newTime\n     * @return {?}\n     */\n    createSubContext(options = null, element, newTime) {\n        const /** @type {?} */ target = element || this.element;\n        const /** @type {?} */ context = new AnimationTimelineContext(this._driver, target, this.subInstructions, this._enterClassName, this._leaveClassName, this.errors, this.timelines, this.currentTimeline.fork(target, newTime || 0));\n        context.previousNode = this.previousNode;\n        context.currentAnimateTimings = this.currentAnimateTimings;\n        context.options = this._copyOptions();\n        context.updateOptions(options);\n        context.currentQueryIndex = this.currentQueryIndex;\n        context.currentQueryTotal = this.currentQueryTotal;\n        context.parentContext = this;\n        this.subContextCount++;\n        return context;\n    }\n    /**\n     * @param {?=} newTime\n     * @return {?}\n     */\n    transformIntoNewTimeline(newTime) {\n        this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;\n        this.currentTimeline = this.currentTimeline.fork(this.element, newTime);\n        this.timelines.push(this.currentTimeline);\n        return this.currentTimeline;\n    }\n    /**\n     * @param {?} instruction\n     * @param {?} duration\n     * @param {?} delay\n     * @return {?}\n     */\n    appendInstructionToTimeline(instruction, duration, delay) {\n        const /** @type {?} */ updatedTimings = {\n            duration: duration != null ? duration : instruction.duration,\n            delay: this.currentTimeline.currentTime + (delay != null ? delay : 0) + instruction.delay,\n            easing: ''\n        };\n        const /** @type {?} */ builder = new SubTimelineBuilder(this._driver, instruction.element, instruction.keyframes, instruction.preStyleProps, instruction.postStyleProps, updatedTimings, instruction.stretchStartingKeyframe);\n        this.timelines.push(builder);\n        return updatedTimings;\n    }\n    /**\n     * @param {?} time\n     * @return {?}\n     */\n    incrementTime(time) {\n        this.currentTimeline.forwardTime(this.currentTimeline.duration + time);\n    }\n    /**\n     * @param {?} delay\n     * @return {?}\n     */\n    delayNextStep(delay) {\n        // negative delays are not yet supported\n        if (delay > 0) {\n            this.currentTimeline.delayNextStep(delay);\n        }\n    }\n    /**\n     * @param {?} selector\n     * @param {?} originalSelector\n     * @param {?} limit\n     * @param {?} includeSelf\n     * @param {?} optional\n     * @param {?} errors\n     * @return {?}\n     */\n    invokeQuery(selector, originalSelector, limit, includeSelf, optional, errors) {\n        let /** @type {?} */ results = [];\n        if (includeSelf) {\n            results.push(this.element);\n        }\n        if (selector.length > 0) {\n            // if :self is only used then the selector is empty\n            selector = selector.replace(ENTER_TOKEN_REGEX, '.' + this._enterClassName);\n            selector = selector.replace(LEAVE_TOKEN_REGEX, '.' + this._leaveClassName);\n            const /** @type {?} */ multi = limit != 1;\n            let /** @type {?} */ elements = this._driver.query(this.element, selector, multi);\n            if (limit !== 0) {\n                elements = limit < 0 ? elements.slice(elements.length + limit, elements.length) :\n                    elements.slice(0, limit);\n            }\n            results.push(...elements);\n        }\n        if (!optional && results.length == 0) {\n            errors.push(`\\`query(\"${originalSelector}\")\\` returned zero elements. (Use \\`query(\"${originalSelector}\", { optional: true })\\` if you wish to allow this.)`);\n        }\n        return results;\n    }\n}\nclass TimelineBuilder {\n    /**\n     * @param {?} _driver\n     * @param {?} element\n     * @param {?} startTime\n     * @param {?=} _elementTimelineStylesLookup\n     */\n    constructor(_driver, element, startTime, _elementTimelineStylesLookup) {\n        this._driver = _driver;\n        this.element = element;\n        this.startTime = startTime;\n        this._elementTimelineStylesLookup = _elementTimelineStylesLookup;\n        this.duration = 0;\n        this._previousKeyframe = {};\n        this._currentKeyframe = {};\n        this._keyframes = new Map();\n        this._styleSummary = {};\n        this._pendingStyles = {};\n        this._backFill = {};\n        this._currentEmptyStepKeyframe = null;\n        if (!this._elementTimelineStylesLookup) {\n            this._elementTimelineStylesLookup = new Map();\n        }\n        this._localTimelineStyles = Object.create(this._backFill, {});\n        this._globalTimelineStyles = /** @type {?} */ ((this._elementTimelineStylesLookup.get(element)));\n        if (!this._globalTimelineStyles) {\n            this._globalTimelineStyles = this._localTimelineStyles;\n            this._elementTimelineStylesLookup.set(element, this._localTimelineStyles);\n        }\n        this._loadKeyframe();\n    }\n    /**\n     * @return {?}\n     */\n    containsAnimation() {\n        switch (this._keyframes.size) {\n            case 0:\n                return false;\n            case 1:\n                return this.getCurrentStyleProperties().length > 0;\n            default:\n                return true;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getCurrentStyleProperties() { return Object.keys(this._currentKeyframe); }\n    /**\n     * @return {?}\n     */\n    get currentTime() { return this.startTime + this.duration; }\n    /**\n     * @param {?} delay\n     * @return {?}\n     */\n    delayNextStep(delay) {\n        // in the event that a style() step is placed right before a stagger()\n        // and that style() step is the very first style() value in the animation\n        // then we need to make a copy of the keyframe [0, copy, 1] so that the delay\n        // properly applies the style() values to work with the stagger...\n        const /** @type {?} */ hasPreStyleStep = this._keyframes.size == 1 && Object.keys(this._pendingStyles).length;\n        if (this.duration || hasPreStyleStep) {\n            this.forwardTime(this.currentTime + delay);\n            if (hasPreStyleStep) {\n                this.snapshotCurrentStyles();\n            }\n        }\n        else {\n            this.startTime += delay;\n        }\n    }\n    /**\n     * @param {?} element\n     * @param {?=} currentTime\n     * @return {?}\n     */\n    fork(element, currentTime) {\n        this.applyStylesToKeyframe();\n        return new TimelineBuilder(this._driver, element, currentTime || this.currentTime, this._elementTimelineStylesLookup);\n    }\n    /**\n     * @return {?}\n     */\n    _loadKeyframe() {\n        if (this._currentKeyframe) {\n            this._previousKeyframe = this._currentKeyframe;\n        }\n        this._currentKeyframe = /** @type {?} */ ((this._keyframes.get(this.duration)));\n        if (!this._currentKeyframe) {\n            this._currentKeyframe = Object.create(this._backFill, {});\n            this._keyframes.set(this.duration, this._currentKeyframe);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    forwardFrame() {\n        this.duration += ONE_FRAME_IN_MILLISECONDS;\n        this._loadKeyframe();\n    }\n    /**\n     * @param {?} time\n     * @return {?}\n     */\n    forwardTime(time) {\n        this.applyStylesToKeyframe();\n        this.duration = time;\n        this._loadKeyframe();\n    }\n    /**\n     * @param {?} prop\n     * @param {?} value\n     * @return {?}\n     */\n    _updateStyle(prop, value) {\n        this._localTimelineStyles[prop] = value;\n        this._globalTimelineStyles[prop] = value;\n        this._styleSummary[prop] = { time: this.currentTime, value };\n    }\n    /**\n     * @return {?}\n     */\n    allowOnlyTimelineStyles() { return this._currentEmptyStepKeyframe !== this._currentKeyframe; }\n    /**\n     * @param {?} easing\n     * @return {?}\n     */\n    applyEmptyStep(easing) {\n        if (easing) {\n            this._previousKeyframe['easing'] = easing;\n        }\n        // special case for animate(duration):\n        // all missing styles are filled with a `*` value then\n        // if any destination styles are filled in later on the same\n        // keyframe then they will override the overridden styles\n        // We use `_globalTimelineStyles` here because there may be\n        // styles in previous keyframes that are not present in this timeline\n        Object.keys(this._globalTimelineStyles).forEach(prop => {\n            this._backFill[prop] = this._globalTimelineStyles[prop] || AUTO_STYLE;\n            this._currentKeyframe[prop] = AUTO_STYLE;\n        });\n        this._currentEmptyStepKeyframe = this._currentKeyframe;\n    }\n    /**\n     * @param {?} input\n     * @param {?} easing\n     * @param {?} errors\n     * @param {?=} options\n     * @return {?}\n     */\n    setStyles(input, easing, errors, options) {\n        if (easing) {\n            this._previousKeyframe['easing'] = easing;\n        }\n        const /** @type {?} */ params = (options && options.params) || {};\n        const /** @type {?} */ styles = flattenStyles(input, this._globalTimelineStyles);\n        Object.keys(styles).forEach(prop => {\n            const /** @type {?} */ val = interpolateParams(styles[prop], params, errors);\n            this._pendingStyles[prop] = val;\n            if (!this._localTimelineStyles.hasOwnProperty(prop)) {\n                this._backFill[prop] = this._globalTimelineStyles.hasOwnProperty(prop) ?\n                    this._globalTimelineStyles[prop] :\n                    AUTO_STYLE;\n            }\n            this._updateStyle(prop, val);\n        });\n    }\n    /**\n     * @return {?}\n     */\n    applyStylesToKeyframe() {\n        const /** @type {?} */ styles = this._pendingStyles;\n        const /** @type {?} */ props = Object.keys(styles);\n        if (props.length == 0)\n            return;\n        this._pendingStyles = {};\n        props.forEach(prop => {\n            const /** @type {?} */ val = styles[prop];\n            this._currentKeyframe[prop] = val;\n        });\n        Object.keys(this._localTimelineStyles).forEach(prop => {\n            if (!this._currentKeyframe.hasOwnProperty(prop)) {\n                this._currentKeyframe[prop] = this._localTimelineStyles[prop];\n            }\n        });\n    }\n    /**\n     * @return {?}\n     */\n    snapshotCurrentStyles() {\n        Object.keys(this._localTimelineStyles).forEach(prop => {\n            const /** @type {?} */ val = this._localTimelineStyles[prop];\n            this._pendingStyles[prop] = val;\n            this._updateStyle(prop, val);\n        });\n    }\n    /**\n     * @return {?}\n     */\n    getFinalKeyframe() { return this._keyframes.get(this.duration); }\n    /**\n     * @return {?}\n     */\n    get properties() {\n        const /** @type {?} */ properties = [];\n        for (let /** @type {?} */ prop in this._currentKeyframe) {\n            properties.push(prop);\n        }\n        return properties;\n    }\n    /**\n     * @param {?} timeline\n     * @return {?}\n     */\n    mergeTimelineCollectedStyles(timeline) {\n        Object.keys(timeline._styleSummary).forEach(prop => {\n            const /** @type {?} */ details0 = this._styleSummary[prop];\n            const /** @type {?} */ details1 = timeline._styleSummary[prop];\n            if (!details0 || details1.time > details0.time) {\n                this._updateStyle(prop, details1.value);\n            }\n        });\n    }\n    /**\n     * @return {?}\n     */\n    buildKeyframes() {\n        this.applyStylesToKeyframe();\n        const /** @type {?} */ preStyleProps = new Set();\n        const /** @type {?} */ postStyleProps = new Set();\n        const /** @type {?} */ isEmpty = this._keyframes.size === 1 && this.duration === 0;\n        let /** @type {?} */ finalKeyframes = [];\n        this._keyframes.forEach((keyframe, time) => {\n            const /** @type {?} */ finalKeyframe = copyStyles(keyframe, true);\n            Object.keys(finalKeyframe).forEach(prop => {\n                const /** @type {?} */ value = finalKeyframe[prop];\n                if (value == ɵPRE_STYLE) {\n                    preStyleProps.add(prop);\n                }\n                else if (value == AUTO_STYLE) {\n                    postStyleProps.add(prop);\n                }\n            });\n            if (!isEmpty) {\n                finalKeyframe['offset'] = time / this.duration;\n            }\n            finalKeyframes.push(finalKeyframe);\n        });\n        const /** @type {?} */ preProps = preStyleProps.size ? iteratorToArray(preStyleProps.values()) : [];\n        const /** @type {?} */ postProps = postStyleProps.size ? iteratorToArray(postStyleProps.values()) : [];\n        // special case for a 0-second animation (which is designed just to place styles onscreen)\n        if (isEmpty) {\n            const /** @type {?} */ kf0 = finalKeyframes[0];\n            const /** @type {?} */ kf1 = copyObj(kf0);\n            kf0['offset'] = 0;\n            kf1['offset'] = 1;\n            finalKeyframes = [kf0, kf1];\n        }\n        return createTimelineInstruction(this.element, finalKeyframes, preProps, postProps, this.duration, this.startTime, this.easing, false);\n    }\n}\nclass SubTimelineBuilder extends TimelineBuilder {\n    /**\n     * @param {?} driver\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} preStyleProps\n     * @param {?} postStyleProps\n     * @param {?} timings\n     * @param {?=} _stretchStartingKeyframe\n     */\n    constructor(driver, element, keyframes, preStyleProps, postStyleProps, timings, _stretchStartingKeyframe = false) {\n        super(driver, element, timings.delay);\n        this.element = element;\n        this.keyframes = keyframes;\n        this.preStyleProps = preStyleProps;\n        this.postStyleProps = postStyleProps;\n        this._stretchStartingKeyframe = _stretchStartingKeyframe;\n        this.timings = { duration: timings.duration, delay: timings.delay, easing: timings.easing };\n    }\n    /**\n     * @return {?}\n     */\n    containsAnimation() { return this.keyframes.length > 1; }\n    /**\n     * @return {?}\n     */\n    buildKeyframes() {\n        let /** @type {?} */ keyframes = this.keyframes;\n        let { delay, duration, easing } = this.timings;\n        if (this._stretchStartingKeyframe && delay) {\n            const /** @type {?} */ newKeyframes = [];\n            const /** @type {?} */ totalTime = duration + delay;\n            const /** @type {?} */ startingGap = delay / totalTime;\n            // the original starting keyframe now starts once the delay is done\n            const /** @type {?} */ newFirstKeyframe = copyStyles(keyframes[0], false);\n            newFirstKeyframe['offset'] = 0;\n            newKeyframes.push(newFirstKeyframe);\n            const /** @type {?} */ oldFirstKeyframe = copyStyles(keyframes[0], false);\n            oldFirstKeyframe['offset'] = roundOffset(startingGap);\n            newKeyframes.push(oldFirstKeyframe);\n            /*\n                    When the keyframe is stretched then it means that the delay before the animation\n                    starts is gone. Instead the first keyframe is placed at the start of the animation\n                    and it is then copied to where it starts when the original delay is over. This basically\n                    means nothing animates during that delay, but the styles are still renderered. For this\n                    to work the original offset values that exist in the original keyframes must be \"warped\"\n                    so that they can take the new keyframe + delay into account.\n            \n                    delay=1000, duration=1000, keyframes = 0 .5 1\n            \n                    turns into\n            \n                    delay=0, duration=2000, keyframes = 0 .33 .66 1\n                   */\n            // offsets between 1 ... n -1 are all warped by the keyframe stretch\n            const /** @type {?} */ limit = keyframes.length - 1;\n            for (let /** @type {?} */ i = 1; i <= limit; i++) {\n                let /** @type {?} */ kf = copyStyles(keyframes[i], false);\n                const /** @type {?} */ oldOffset = /** @type {?} */ (kf['offset']);\n                const /** @type {?} */ timeAtKeyframe = delay + oldOffset * duration;\n                kf['offset'] = roundOffset(timeAtKeyframe / totalTime);\n                newKeyframes.push(kf);\n            }\n            // the new starting keyframe should be added at the start\n            duration = totalTime;\n            delay = 0;\n            easing = '';\n            keyframes = newKeyframes;\n        }\n        return createTimelineInstruction(this.element, keyframes, this.preStyleProps, this.postStyleProps, duration, delay, easing, true);\n    }\n}\n/**\n * @param {?} offset\n * @param {?=} decimalPoints\n * @return {?}\n */\nfunction roundOffset(offset, decimalPoints = 3) {\n    const /** @type {?} */ mult = Math.pow(10, decimalPoints - 1);\n    return Math.round(offset * mult) / mult;\n}\n/**\n * @param {?} input\n * @param {?} allStyles\n * @return {?}\n */\nfunction flattenStyles(input, allStyles) {\n    const /** @type {?} */ styles = {};\n    let /** @type {?} */ allProperties;\n    input.forEach(token => {\n        if (token === '*') {\n            allProperties = allProperties || Object.keys(allStyles);\n            allProperties.forEach(prop => { styles[prop] = AUTO_STYLE; });\n        }\n        else {\n            copyStyles(/** @type {?} */ (token), false, styles);\n        }\n    });\n    return styles;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass Animation {\n    /**\n     * @param {?} _driver\n     * @param {?} input\n     */\n    constructor(_driver, input) {\n        this._driver = _driver;\n        const /** @type {?} */ errors = [];\n        const /** @type {?} */ ast = buildAnimationAst(_driver, input, errors);\n        if (errors.length) {\n            const /** @type {?} */ errorMessage = `animation validation failed:\\n${errors.join(\"\\n\")}`;\n            throw new Error(errorMessage);\n        }\n        this._animationAst = ast;\n    }\n    /**\n     * @param {?} element\n     * @param {?} startingStyles\n     * @param {?} destinationStyles\n     * @param {?} options\n     * @param {?=} subInstructions\n     * @return {?}\n     */\n    buildTimelines(element, startingStyles, destinationStyles, options, subInstructions) {\n        const /** @type {?} */ start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) : /** @type {?} */ (startingStyles);\n        const /** @type {?} */ dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) : /** @type {?} */ (destinationStyles);\n        const /** @type {?} */ errors = [];\n        subInstructions = subInstructions || new ElementInstructionMap();\n        const /** @type {?} */ result = buildAnimationTimelines(this._driver, element, this._animationAst, ENTER_CLASSNAME, LEAVE_CLASSNAME, start, dest, options, subInstructions, errors);\n        if (errors.length) {\n            const /** @type {?} */ errorMessage = `animation building failed:\\n${errors.join(\"\\n\")}`;\n            throw new Error(errorMessage);\n        }\n        return result;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@experimental Animation support is experimental.\n * @abstract\n */\nclass AnimationStyleNormalizer {\n}\n/**\n * \\@experimental Animation support is experimental.\n */\nclass NoopAnimationStyleNormalizer {\n    /**\n     * @param {?} propertyName\n     * @param {?} errors\n     * @return {?}\n     */\n    normalizePropertyName(propertyName, errors) { return propertyName; }\n    /**\n     * @param {?} userProvidedProperty\n     * @param {?} normalizedProperty\n     * @param {?} value\n     * @param {?} errors\n     * @return {?}\n     */\n    normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {\n        return /** @type {?} */ (value);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass WebAnimationsStyleNormalizer extends AnimationStyleNormalizer {\n    /**\n     * @param {?} propertyName\n     * @param {?} errors\n     * @return {?}\n     */\n    normalizePropertyName(propertyName, errors) {\n        return dashCaseToCamelCase(propertyName);\n    }\n    /**\n     * @param {?} userProvidedProperty\n     * @param {?} normalizedProperty\n     * @param {?} value\n     * @param {?} errors\n     * @return {?}\n     */\n    normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {\n        let /** @type {?} */ unit = '';\n        const /** @type {?} */ strVal = value.toString().trim();\n        if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {\n            if (typeof value === 'number') {\n                unit = 'px';\n            }\n            else {\n                const /** @type {?} */ valAndSuffixMatch = value.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n                    errors.push(`Please provide a CSS unit value for ${userProvidedProperty}:${value}`);\n                }\n            }\n        }\n        return strVal + unit;\n    }\n}\nconst DIMENSIONAL_PROP_MAP = makeBooleanMap('width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent,perspective'\n    .split(','));\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction makeBooleanMap(keys) {\n    const /** @type {?} */ map = {};\n    keys.forEach(key => map[key] = true);\n    return map;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @record\n */\n\n/**\n * @param {?} element\n * @param {?} triggerName\n * @param {?} fromState\n * @param {?} toState\n * @param {?} isRemovalTransition\n * @param {?} fromStyles\n * @param {?} toStyles\n * @param {?} timelines\n * @param {?} queriedElements\n * @param {?} preStyleProps\n * @param {?} postStyleProps\n * @param {?=} errors\n * @return {?}\n */\nfunction createTransitionInstruction(element, triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines, queriedElements, preStyleProps, postStyleProps, errors) {\n    return {\n        type: 0 /* TransitionAnimation */,\n        element,\n        triggerName,\n        isRemovalTransition,\n        fromState,\n        fromStyles,\n        toState,\n        toStyles,\n        timelines,\n        queriedElements,\n        preStyleProps,\n        postStyleProps,\n        errors\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst EMPTY_OBJECT = {};\nclass AnimationTransitionFactory {\n    /**\n     * @param {?} _triggerName\n     * @param {?} ast\n     * @param {?} _stateStyles\n     */\n    constructor(_triggerName, ast, _stateStyles) {\n        this._triggerName = _triggerName;\n        this.ast = ast;\n        this._stateStyles = _stateStyles;\n    }\n    /**\n     * @param {?} currentState\n     * @param {?} nextState\n     * @return {?}\n     */\n    match(currentState, nextState) {\n        return oneOrMoreTransitionsMatch(this.ast.matchers, currentState, nextState);\n    }\n    /**\n     * @param {?} stateName\n     * @param {?} params\n     * @param {?} errors\n     * @return {?}\n     */\n    buildStyles(stateName, params, errors) {\n        const /** @type {?} */ backupStateStyler = this._stateStyles['*'];\n        const /** @type {?} */ stateStyler = this._stateStyles[stateName];\n        const /** @type {?} */ backupStyles = backupStateStyler ? backupStateStyler.buildStyles(params, errors) : {};\n        return stateStyler ? stateStyler.buildStyles(params, errors) : backupStyles;\n    }\n    /**\n     * @param {?} driver\n     * @param {?} element\n     * @param {?} currentState\n     * @param {?} nextState\n     * @param {?} enterClassName\n     * @param {?} leaveClassName\n     * @param {?=} currentOptions\n     * @param {?=} nextOptions\n     * @param {?=} subInstructions\n     * @return {?}\n     */\n    build(driver, element, currentState, nextState, enterClassName, leaveClassName, currentOptions, nextOptions, subInstructions) {\n        const /** @type {?} */ errors = [];\n        const /** @type {?} */ transitionAnimationParams = this.ast.options && this.ast.options.params || EMPTY_OBJECT;\n        const /** @type {?} */ currentAnimationParams = currentOptions && currentOptions.params || EMPTY_OBJECT;\n        const /** @type {?} */ currentStateStyles = this.buildStyles(currentState, currentAnimationParams, errors);\n        const /** @type {?} */ nextAnimationParams = nextOptions && nextOptions.params || EMPTY_OBJECT;\n        const /** @type {?} */ nextStateStyles = this.buildStyles(nextState, nextAnimationParams, errors);\n        const /** @type {?} */ queriedElements = new Set();\n        const /** @type {?} */ preStyleMap = new Map();\n        const /** @type {?} */ postStyleMap = new Map();\n        const /** @type {?} */ isRemoval = nextState === 'void';\n        const /** @type {?} */ animationOptions = { params: Object.assign({}, transitionAnimationParams, nextAnimationParams) };\n        const /** @type {?} */ timelines = buildAnimationTimelines(driver, element, this.ast.animation, enterClassName, leaveClassName, currentStateStyles, nextStateStyles, animationOptions, subInstructions, errors);\n        if (errors.length) {\n            return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, [], [], preStyleMap, postStyleMap, errors);\n        }\n        timelines.forEach(tl => {\n            const /** @type {?} */ elm = tl.element;\n            const /** @type {?} */ preProps = getOrSetAsInMap(preStyleMap, elm, {});\n            tl.preStyleProps.forEach(prop => preProps[prop] = true);\n            const /** @type {?} */ postProps = getOrSetAsInMap(postStyleMap, elm, {});\n            tl.postStyleProps.forEach(prop => postProps[prop] = true);\n            if (elm !== element) {\n                queriedElements.add(elm);\n            }\n        });\n        const /** @type {?} */ queriedElementsList = iteratorToArray(queriedElements.values());\n        return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, timelines, queriedElementsList, preStyleMap, postStyleMap);\n    }\n}\n/**\n * @param {?} matchFns\n * @param {?} currentState\n * @param {?} nextState\n * @return {?}\n */\nfunction oneOrMoreTransitionsMatch(matchFns, currentState, nextState) {\n    return matchFns.some(fn => fn(currentState, nextState));\n}\nclass AnimationStateStyles {\n    /**\n     * @param {?} styles\n     * @param {?} defaultParams\n     */\n    constructor(styles, defaultParams) {\n        this.styles = styles;\n        this.defaultParams = defaultParams;\n    }\n    /**\n     * @param {?} params\n     * @param {?} errors\n     * @return {?}\n     */\n    buildStyles(params, errors) {\n        const /** @type {?} */ finalStyles = {};\n        const /** @type {?} */ combinedParams = copyObj(this.defaultParams);\n        Object.keys(params).forEach(key => {\n            const /** @type {?} */ value = params[key];\n            if (value != null) {\n                combinedParams[key] = value;\n            }\n        });\n        this.styles.styles.forEach(value => {\n            if (typeof value !== 'string') {\n                const /** @type {?} */ styleObj = /** @type {?} */ (value);\n                Object.keys(styleObj).forEach(prop => {\n                    let /** @type {?} */ val = styleObj[prop];\n                    if (val.length > 1) {\n                        val = interpolateParams(val, combinedParams, errors);\n                    }\n                    finalStyles[prop] = val;\n                });\n            }\n        });\n        return finalStyles;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@experimental Animation support is experimental.\n * @param {?} name\n * @param {?} ast\n * @return {?}\n */\nfunction buildTrigger(name, ast) {\n    return new AnimationTrigger(name, ast);\n}\n/**\n * \\@experimental Animation support is experimental.\n */\nclass AnimationTrigger {\n    /**\n     * @param {?} name\n     * @param {?} ast\n     */\n    constructor(name, ast) {\n        this.name = name;\n        this.ast = ast;\n        this.transitionFactories = [];\n        this.states = {};\n        ast.states.forEach(ast => {\n            const /** @type {?} */ defaultParams = (ast.options && ast.options.params) || {};\n            this.states[ast.name] = new AnimationStateStyles(ast.style, defaultParams);\n        });\n        balanceProperties(this.states, 'true', '1');\n        balanceProperties(this.states, 'false', '0');\n        ast.transitions.forEach(ast => {\n            this.transitionFactories.push(new AnimationTransitionFactory(name, ast, this.states));\n        });\n        this.fallbackTransition = createFallbackTransition(name, this.states);\n    }\n    /**\n     * @return {?}\n     */\n    get containsQueries() { return this.ast.queryCount > 0; }\n    /**\n     * @param {?} currentState\n     * @param {?} nextState\n     * @return {?}\n     */\n    matchTransition(currentState, nextState) {\n        const /** @type {?} */ entry = this.transitionFactories.find(f => f.match(currentState, nextState));\n        return entry || null;\n    }\n    /**\n     * @param {?} currentState\n     * @param {?} params\n     * @param {?} errors\n     * @return {?}\n     */\n    matchStyles(currentState, params, errors) {\n        return this.fallbackTransition.buildStyles(currentState, params, errors);\n    }\n}\n/**\n * @param {?} triggerName\n * @param {?} states\n * @return {?}\n */\nfunction createFallbackTransition(triggerName, states) {\n    const /** @type {?} */ matchers = [(fromState, toState) => true];\n    const /** @type {?} */ animation = { type: 2 /* Sequence */, steps: [], options: null };\n    const /** @type {?} */ transition = {\n        type: 1 /* Transition */,\n        animation,\n        matchers,\n        options: null,\n        queryCount: 0,\n        depCount: 0\n    };\n    return new AnimationTransitionFactory(triggerName, transition, states);\n}\n/**\n * @param {?} obj\n * @param {?} key1\n * @param {?} key2\n * @return {?}\n */\nfunction balanceProperties(obj, key1, key2) {\n    if (obj.hasOwnProperty(key1)) {\n        if (!obj.hasOwnProperty(key2)) {\n            obj[key2] = obj[key1];\n        }\n    }\n    else if (obj.hasOwnProperty(key2)) {\n        obj[key1] = obj[key2];\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst EMPTY_INSTRUCTION_MAP = new ElementInstructionMap();\nclass TimelineAnimationEngine {\n    /**\n     * @param {?} _driver\n     * @param {?} _normalizer\n     */\n    constructor(_driver, _normalizer) {\n        this._driver = _driver;\n        this._normalizer = _normalizer;\n        this._animations = {};\n        this._playersById = {};\n        this.players = [];\n    }\n    /**\n     * @param {?} id\n     * @param {?} metadata\n     * @return {?}\n     */\n    register(id, metadata) {\n        const /** @type {?} */ errors = [];\n        const /** @type {?} */ ast = buildAnimationAst(this._driver, metadata, errors);\n        if (errors.length) {\n            throw new Error(`Unable to build the animation due to the following errors: ${errors.join(\"\\n\")}`);\n        }\n        else {\n            this._animations[id] = ast;\n        }\n    }\n    /**\n     * @param {?} i\n     * @param {?} preStyles\n     * @param {?=} postStyles\n     * @return {?}\n     */\n    _buildPlayer(i, preStyles, postStyles) {\n        const /** @type {?} */ element = i.element;\n        const /** @type {?} */ keyframes = normalizeKeyframes(this._driver, this._normalizer, element, i.keyframes, preStyles, postStyles);\n        return this._driver.animate(element, keyframes, i.duration, i.delay, i.easing, []);\n    }\n    /**\n     * @param {?} id\n     * @param {?} element\n     * @param {?=} options\n     * @return {?}\n     */\n    create(id, element, options = {}) {\n        const /** @type {?} */ errors = [];\n        const /** @type {?} */ ast = this._animations[id];\n        let /** @type {?} */ instructions;\n        const /** @type {?} */ autoStylesMap = new Map();\n        if (ast) {\n            instructions = buildAnimationTimelines(this._driver, element, ast, ENTER_CLASSNAME, LEAVE_CLASSNAME, {}, {}, options, EMPTY_INSTRUCTION_MAP, errors);\n            instructions.forEach(inst => {\n                const /** @type {?} */ styles = getOrSetAsInMap(autoStylesMap, inst.element, {});\n                inst.postStyleProps.forEach(prop => styles[prop] = null);\n            });\n        }\n        else {\n            errors.push('The requested animation doesn\\'t exist or has already been destroyed');\n            instructions = [];\n        }\n        if (errors.length) {\n            throw new Error(`Unable to create the animation due to the following errors: ${errors.join(\"\\n\")}`);\n        }\n        autoStylesMap.forEach((styles, element) => {\n            Object.keys(styles).forEach(prop => { styles[prop] = this._driver.computeStyle(element, prop, AUTO_STYLE); });\n        });\n        const /** @type {?} */ players = instructions.map(i => {\n            const /** @type {?} */ styles = autoStylesMap.get(i.element);\n            return this._buildPlayer(i, {}, styles);\n        });\n        const /** @type {?} */ player = optimizeGroupPlayer(players);\n        this._playersById[id] = player;\n        player.onDestroy(() => this.destroy(id));\n        this.players.push(player);\n        return player;\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    destroy(id) {\n        const /** @type {?} */ player = this._getPlayer(id);\n        player.destroy();\n        delete this._playersById[id];\n        const /** @type {?} */ index = this.players.indexOf(player);\n        if (index >= 0) {\n            this.players.splice(index, 1);\n        }\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    _getPlayer(id) {\n        const /** @type {?} */ player = this._playersById[id];\n        if (!player) {\n            throw new Error(`Unable to find the timeline player referenced by ${id}`);\n        }\n        return player;\n    }\n    /**\n     * @param {?} id\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(id, element, eventName, callback) {\n        // triggerName, fromState, toState are all ignored for timeline animations\n        const /** @type {?} */ baseEvent = makeAnimationEvent(element, '', '', '');\n        listenOnPlayer(this._getPlayer(id), eventName, baseEvent, callback);\n        return () => { };\n    }\n    /**\n     * @param {?} id\n     * @param {?} element\n     * @param {?} command\n     * @param {?} args\n     * @return {?}\n     */\n    command(id, element, command, args) {\n        if (command == 'register') {\n            this.register(id, /** @type {?} */ (args[0]));\n            return;\n        }\n        if (command == 'create') {\n            const /** @type {?} */ options = /** @type {?} */ ((args[0] || {}));\n            this.create(id, element, options);\n            return;\n        }\n        const /** @type {?} */ player = this._getPlayer(id);\n        switch (command) {\n            case 'play':\n                player.play();\n                break;\n            case 'pause':\n                player.pause();\n                break;\n            case 'reset':\n                player.reset();\n                break;\n            case 'restart':\n                player.restart();\n                break;\n            case 'finish':\n                player.finish();\n                break;\n            case 'init':\n                player.init();\n                break;\n            case 'setPosition':\n                player.setPosition(parseFloat(/** @type {?} */ (args[0])));\n                break;\n            case 'destroy':\n                this.destroy(id);\n                break;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst QUEUED_CLASSNAME = 'ng-animate-queued';\nconst QUEUED_SELECTOR = '.ng-animate-queued';\nconst DISABLED_CLASSNAME = 'ng-animate-disabled';\nconst DISABLED_SELECTOR = '.ng-animate-disabled';\nconst STAR_CLASSNAME = 'ng-star-inserted';\nconst STAR_SELECTOR = '.ng-star-inserted';\nconst EMPTY_PLAYER_ARRAY = [];\nconst NULL_REMOVAL_STATE = {\n    namespaceId: '',\n    setForRemoval: null,\n    hasAnimation: false,\n    removedBeforeQueried: false\n};\nconst NULL_REMOVED_QUERIED_STATE = {\n    namespaceId: '',\n    setForRemoval: null,\n    hasAnimation: false,\n    removedBeforeQueried: true\n};\n/**\n * @record\n */\n\nconst REMOVAL_FLAG = '__ng_removed';\n/**\n * @record\n */\n\nclass StateValue {\n    /**\n     * @param {?} input\n     * @param {?=} namespaceId\n     */\n    constructor(input, namespaceId = '') {\n        this.namespaceId = namespaceId;\n        const /** @type {?} */ isObj = input && input.hasOwnProperty('value');\n        const /** @type {?} */ value = isObj ? input['value'] : input;\n        this.value = normalizeTriggerValue(value);\n        if (isObj) {\n            const /** @type {?} */ options = copyObj(/** @type {?} */ (input));\n            delete options['value'];\n            this.options = /** @type {?} */ (options);\n        }\n        else {\n            this.options = {};\n        }\n        if (!this.options.params) {\n            this.options.params = {};\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get params() { return /** @type {?} */ (this.options.params); }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    absorbOptions(options) {\n        const /** @type {?} */ newParams = options.params;\n        if (newParams) {\n            const /** @type {?} */ oldParams = /** @type {?} */ ((this.options.params));\n            Object.keys(newParams).forEach(prop => {\n                if (oldParams[prop] == null) {\n                    oldParams[prop] = newParams[prop];\n                }\n            });\n        }\n    }\n}\nconst VOID_VALUE = 'void';\nconst DEFAULT_STATE_VALUE = new StateValue(VOID_VALUE);\nconst DELETED_STATE_VALUE = new StateValue('DELETED');\nclass AnimationTransitionNamespace {\n    /**\n     * @param {?} id\n     * @param {?} hostElement\n     * @param {?} _engine\n     */\n    constructor(id, hostElement, _engine) {\n        this.id = id;\n        this.hostElement = hostElement;\n        this._engine = _engine;\n        this.players = [];\n        this._triggers = {};\n        this._queue = [];\n        this._elementListeners = new Map();\n        this._hostClassName = 'ng-tns-' + id;\n        addClass(hostElement, this._hostClassName);\n    }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @param {?} phase\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(element, name, phase, callback) {\n        if (!this._triggers.hasOwnProperty(name)) {\n            throw new Error(`Unable to listen on the animation trigger event \"${phase}\" because the animation trigger \"${name}\" doesn\\'t exist!`);\n        }\n        if (phase == null || phase.length == 0) {\n            throw new Error(`Unable to listen on the animation trigger \"${name}\" because the provided event is undefined!`);\n        }\n        if (!isTriggerEventValid(phase)) {\n            throw new Error(`The provided animation trigger event \"${phase}\" for the animation trigger \"${name}\" is not supported!`);\n        }\n        const /** @type {?} */ listeners = getOrSetAsInMap(this._elementListeners, element, []);\n        const /** @type {?} */ data = { name, phase, callback };\n        listeners.push(data);\n        const /** @type {?} */ triggersWithStates = getOrSetAsInMap(this._engine.statesByElement, element, {});\n        if (!triggersWithStates.hasOwnProperty(name)) {\n            addClass(element, NG_TRIGGER_CLASSNAME);\n            addClass(element, NG_TRIGGER_CLASSNAME + '-' + name);\n            triggersWithStates[name] = DEFAULT_STATE_VALUE;\n        }\n        return () => {\n            // the event listener is removed AFTER the flush has occurred such\n            // that leave animations callbacks can fire (otherwise if the node\n            // is removed in between then the listeners would be deregistered)\n            this._engine.afterFlush(() => {\n                const /** @type {?} */ index = listeners.indexOf(data);\n                if (index >= 0) {\n                    listeners.splice(index, 1);\n                }\n                if (!this._triggers[name]) {\n                    delete triggersWithStates[name];\n                }\n            });\n        };\n    }\n    /**\n     * @param {?} name\n     * @param {?} ast\n     * @return {?}\n     */\n    register(name, ast) {\n        if (this._triggers[name]) {\n            // throw\n            return false;\n        }\n        else {\n            this._triggers[name] = ast;\n            return true;\n        }\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    _getTrigger(name) {\n        const /** @type {?} */ trigger = this._triggers[name];\n        if (!trigger) {\n            throw new Error(`The provided animation trigger \"${name}\" has not been registered!`);\n        }\n        return trigger;\n    }\n    /**\n     * @param {?} element\n     * @param {?} triggerName\n     * @param {?} value\n     * @param {?=} defaultToFallback\n     * @return {?}\n     */\n    trigger(element, triggerName, value, defaultToFallback = true) {\n        const /** @type {?} */ trigger = this._getTrigger(triggerName);\n        const /** @type {?} */ player = new TransitionAnimationPlayer(this.id, triggerName, element);\n        let /** @type {?} */ triggersWithStates = this._engine.statesByElement.get(element);\n        if (!triggersWithStates) {\n            addClass(element, NG_TRIGGER_CLASSNAME);\n            addClass(element, NG_TRIGGER_CLASSNAME + '-' + triggerName);\n            this._engine.statesByElement.set(element, triggersWithStates = {});\n        }\n        let /** @type {?} */ fromState = triggersWithStates[triggerName];\n        const /** @type {?} */ toState = new StateValue(value, this.id);\n        const /** @type {?} */ isObj = value && value.hasOwnProperty('value');\n        if (!isObj && fromState) {\n            toState.absorbOptions(fromState.options);\n        }\n        triggersWithStates[triggerName] = toState;\n        if (!fromState) {\n            fromState = DEFAULT_STATE_VALUE;\n        }\n        else if (fromState === DELETED_STATE_VALUE) {\n            return player;\n        }\n        const /** @type {?} */ isRemoval = toState.value === VOID_VALUE;\n        // normally this isn't reached by here, however, if an object expression\n        // is passed in then it may be a new object each time. Comparing the value\n        // is important since that will stay the same despite there being a new object.\n        // The removal arc here is special cased because the same element is triggered\n        // twice in the event that it contains animations on the outer/inner portions\n        // of the host container\n        if (!isRemoval && fromState.value === toState.value) {\n            // this means that despite the value not changing, some inner params\n            // have changed which means that the animation final styles need to be applied\n            if (!objEquals(fromState.params, toState.params)) {\n                const /** @type {?} */ errors = [];\n                const /** @type {?} */ fromStyles = trigger.matchStyles(fromState.value, fromState.params, errors);\n                const /** @type {?} */ toStyles = trigger.matchStyles(toState.value, toState.params, errors);\n                if (errors.length) {\n                    this._engine.reportError(errors);\n                }\n                else {\n                    this._engine.afterFlush(() => {\n                        eraseStyles(element, fromStyles);\n                        setStyles(element, toStyles);\n                    });\n                }\n            }\n            return;\n        }\n        const /** @type {?} */ playersOnElement = getOrSetAsInMap(this._engine.playersByElement, element, []);\n        playersOnElement.forEach(player => {\n            // only remove the player if it is queued on the EXACT same trigger/namespace\n            // we only also deal with queued players here because if the animation has\n            // started then we want to keep the player alive until the flush happens\n            // (which is where the previousPlayers are passed into the new palyer)\n            if (player.namespaceId == this.id && player.triggerName == triggerName && player.queued) {\n                player.destroy();\n            }\n        });\n        let /** @type {?} */ transition = trigger.matchTransition(fromState.value, toState.value);\n        let /** @type {?} */ isFallbackTransition = false;\n        if (!transition) {\n            if (!defaultToFallback)\n                return;\n            transition = trigger.fallbackTransition;\n            isFallbackTransition = true;\n        }\n        this._engine.totalQueuedPlayers++;\n        this._queue.push({ element, triggerName, transition, fromState, toState, player, isFallbackTransition });\n        if (!isFallbackTransition) {\n            addClass(element, QUEUED_CLASSNAME);\n            player.onStart(() => { removeClass(element, QUEUED_CLASSNAME); });\n        }\n        player.onDone(() => {\n            let /** @type {?} */ index = this.players.indexOf(player);\n            if (index >= 0) {\n                this.players.splice(index, 1);\n            }\n            const /** @type {?} */ players = this._engine.playersByElement.get(element);\n            if (players) {\n                let /** @type {?} */ index = players.indexOf(player);\n                if (index >= 0) {\n                    players.splice(index, 1);\n                }\n            }\n        });\n        this.players.push(player);\n        playersOnElement.push(player);\n        return player;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    deregister(name) {\n        delete this._triggers[name];\n        this._engine.statesByElement.forEach((stateMap, element) => { delete stateMap[name]; });\n        this._elementListeners.forEach((listeners, element) => {\n            this._elementListeners.set(element, listeners.filter(entry => { return entry.name != name; }));\n        });\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    clearElementCache(element) {\n        this._engine.statesByElement.delete(element);\n        this._elementListeners.delete(element);\n        const /** @type {?} */ elementPlayers = this._engine.playersByElement.get(element);\n        if (elementPlayers) {\n            elementPlayers.forEach(player => player.destroy());\n            this._engine.playersByElement.delete(element);\n        }\n    }\n    /**\n     * @param {?} rootElement\n     * @param {?} context\n     * @param {?=} animate\n     * @return {?}\n     */\n    _signalRemovalForInnerTriggers(rootElement, context, animate = false) {\n        // emulate a leave animation for all inner nodes within this node.\n        // If there are no animations found for any of the nodes then clear the cache\n        // for the element.\n        this._engine.driver.query(rootElement, NG_TRIGGER_SELECTOR, true).forEach(elm => {\n            // this means that an inner remove() operation has already kicked off\n            // the animation on this element...\n            if (elm[REMOVAL_FLAG])\n                return;\n            const /** @type {?} */ namespaces = this._engine.fetchNamespacesByElement(elm);\n            if (namespaces.size) {\n                namespaces.forEach(ns => ns.triggerLeaveAnimation(elm, context, false, true));\n            }\n            else {\n                this.clearElementCache(elm);\n            }\n        });\n    }\n    /**\n     * @param {?} element\n     * @param {?} context\n     * @param {?=} destroyAfterComplete\n     * @param {?=} defaultToFallback\n     * @return {?}\n     */\n    triggerLeaveAnimation(element, context, destroyAfterComplete, defaultToFallback) {\n        const /** @type {?} */ triggerStates = this._engine.statesByElement.get(element);\n        if (triggerStates) {\n            const /** @type {?} */ players = [];\n            Object.keys(triggerStates).forEach(triggerName => {\n                // this check is here in the event that an element is removed\n                // twice (both on the host level and the component level)\n                if (this._triggers[triggerName]) {\n                    const /** @type {?} */ player = this.trigger(element, triggerName, VOID_VALUE, defaultToFallback);\n                    if (player) {\n                        players.push(player);\n                    }\n                }\n            });\n            if (players.length) {\n                this._engine.markElementAsRemoved(this.id, element, true, context);\n                if (destroyAfterComplete) {\n                    optimizeGroupPlayer(players).onDone(() => this._engine.processLeaveNode(element));\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    prepareLeaveAnimationListeners(element) {\n        const /** @type {?} */ listeners = this._elementListeners.get(element);\n        if (listeners) {\n            const /** @type {?} */ visitedTriggers = new Set();\n            listeners.forEach(listener => {\n                const /** @type {?} */ triggerName = listener.name;\n                if (visitedTriggers.has(triggerName))\n                    return;\n                visitedTriggers.add(triggerName);\n                const /** @type {?} */ trigger = this._triggers[triggerName];\n                const /** @type {?} */ transition = trigger.fallbackTransition;\n                const /** @type {?} */ elementStates = /** @type {?} */ ((this._engine.statesByElement.get(element)));\n                const /** @type {?} */ fromState = elementStates[triggerName] || DEFAULT_STATE_VALUE;\n                const /** @type {?} */ toState = new StateValue(VOID_VALUE);\n                const /** @type {?} */ player = new TransitionAnimationPlayer(this.id, triggerName, element);\n                this._engine.totalQueuedPlayers++;\n                this._queue.push({\n                    element,\n                    triggerName,\n                    transition,\n                    fromState,\n                    toState,\n                    player,\n                    isFallbackTransition: true\n                });\n            });\n        }\n    }\n    /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    removeNode(element, context) {\n        const /** @type {?} */ engine = this._engine;\n        if (element.childElementCount) {\n            this._signalRemovalForInnerTriggers(element, context, true);\n        }\n        // this means that a * => VOID animation was detected and kicked off\n        if (this.triggerLeaveAnimation(element, context, true))\n            return;\n        // find the player that is animating and make sure that the\n        // removal is delayed until that player has completed\n        let /** @type {?} */ containsPotentialParentTransition = false;\n        if (engine.totalAnimations) {\n            const /** @type {?} */ currentPlayers = engine.players.length ? engine.playersByQueriedElement.get(element) : [];\n            // when this `if statement` does not continue forward it means that\n            // a previous animation query has selected the current element and\n            // is animating it. In this situation want to continue fowards and\n            // allow the element to be queued up for animation later.\n            if (currentPlayers && currentPlayers.length) {\n                containsPotentialParentTransition = true;\n            }\n            else {\n                let /** @type {?} */ parent = element;\n                while (parent = parent.parentNode) {\n                    const /** @type {?} */ triggers = engine.statesByElement.get(parent);\n                    if (triggers) {\n                        containsPotentialParentTransition = true;\n                        break;\n                    }\n                }\n            }\n        }\n        // at this stage we know that the element will either get removed\n        // during flush or will be picked up by a parent query. Either way\n        // we need to fire the listeners for this element when it DOES get\n        // removed (once the query parent animation is done or after flush)\n        this.prepareLeaveAnimationListeners(element);\n        // whether or not a parent has an animation we need to delay the deferral of the leave\n        // operation until we have more information (which we do after flush() has been called)\n        if (containsPotentialParentTransition) {\n            engine.markElementAsRemoved(this.id, element, false, context);\n        }\n        else {\n            // we do this after the flush has occurred such\n            // that the callbacks can be fired\n            engine.afterFlush(() => this.clearElementCache(element));\n            engine.destroyInnerAnimations(element);\n            engine._onRemovalComplete(element, context);\n        }\n    }\n    /**\n     * @param {?} element\n     * @param {?} parent\n     * @return {?}\n     */\n    insertNode(element, parent) { addClass(element, this._hostClassName); }\n    /**\n     * @param {?} microtaskId\n     * @return {?}\n     */\n    drainQueuedTransitions(microtaskId) {\n        const /** @type {?} */ instructions = [];\n        this._queue.forEach(entry => {\n            const /** @type {?} */ player = entry.player;\n            if (player.destroyed)\n                return;\n            const /** @type {?} */ element = entry.element;\n            const /** @type {?} */ listeners = this._elementListeners.get(element);\n            if (listeners) {\n                listeners.forEach((listener) => {\n                    if (listener.name == entry.triggerName) {\n                        const /** @type {?} */ baseEvent = makeAnimationEvent(element, entry.triggerName, entry.fromState.value, entry.toState.value);\n                        (/** @type {?} */ (baseEvent))['_data'] = microtaskId;\n                        listenOnPlayer(entry.player, listener.phase, baseEvent, listener.callback);\n                    }\n                });\n            }\n            if (player.markedForDestroy) {\n                this._engine.afterFlush(() => {\n                    // now we can destroy the element properly since the event listeners have\n                    // been bound to the player\n                    player.destroy();\n                });\n            }\n            else {\n                instructions.push(entry);\n            }\n        });\n        this._queue = [];\n        return instructions.sort((a, b) => {\n            // if depCount == 0 them move to front\n            // otherwise if a contains b then move back\n            const /** @type {?} */ d0 = a.transition.ast.depCount;\n            const /** @type {?} */ d1 = b.transition.ast.depCount;\n            if (d0 == 0 || d1 == 0) {\n                return d0 - d1;\n            }\n            return this._engine.driver.containsElement(a.element, b.element) ? 1 : -1;\n        });\n    }\n    /**\n     * @param {?} context\n     * @return {?}\n     */\n    destroy(context) {\n        this.players.forEach(p => p.destroy());\n        this._signalRemovalForInnerTriggers(this.hostElement, context);\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    elementContainsData(element) {\n        let /** @type {?} */ containsData = false;\n        if (this._elementListeners.has(element))\n            containsData = true;\n        containsData =\n            (this._queue.find(entry => entry.element === element) ? true : false) || containsData;\n        return containsData;\n    }\n}\n/**\n * @record\n */\n\nclass TransitionAnimationEngine {\n    /**\n     * @param {?} driver\n     * @param {?} _normalizer\n     */\n    constructor(driver, _normalizer) {\n        this.driver = driver;\n        this._normalizer = _normalizer;\n        this.players = [];\n        this.newHostElements = new Map();\n        this.playersByElement = new Map();\n        this.playersByQueriedElement = new Map();\n        this.statesByElement = new Map();\n        this.disabledNodes = new Set();\n        this.totalAnimations = 0;\n        this.totalQueuedPlayers = 0;\n        this._namespaceLookup = {};\n        this._namespaceList = [];\n        this._flushFns = [];\n        this._whenQuietFns = [];\n        this.namespacesByHostElement = new Map();\n        this.collectedEnterElements = [];\n        this.collectedLeaveElements = [];\n        this.onRemovalComplete = (element, context) => { };\n    }\n    /**\n     * \\@internal\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    _onRemovalComplete(element, context) { this.onRemovalComplete(element, context); }\n    /**\n     * @return {?}\n     */\n    get queuedPlayers() {\n        const /** @type {?} */ players = [];\n        this._namespaceList.forEach(ns => {\n            ns.players.forEach(player => {\n                if (player.queued) {\n                    players.push(player);\n                }\n            });\n        });\n        return players;\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} hostElement\n     * @return {?}\n     */\n    createNamespace(namespaceId, hostElement) {\n        const /** @type {?} */ ns = new AnimationTransitionNamespace(namespaceId, hostElement, this);\n        if (hostElement.parentNode) {\n            this._balanceNamespaceList(ns, hostElement);\n        }\n        else {\n            // defer this later until flush during when the host element has\n            // been inserted so that we know exactly where to place it in\n            // the namespace list\n            this.newHostElements.set(hostElement, ns);\n            // given that this host element is apart of the animation code, it\n            // may or may not be inserted by a parent node that is an of an\n            // animation renderer type. If this happens then we can still have\n            // access to this item when we query for :enter nodes. If the parent\n            // is a renderer then the set data-structure will normalize the entry\n            this.collectEnterElement(hostElement);\n        }\n        return this._namespaceLookup[namespaceId] = ns;\n    }\n    /**\n     * @param {?} ns\n     * @param {?} hostElement\n     * @return {?}\n     */\n    _balanceNamespaceList(ns, hostElement) {\n        const /** @type {?} */ limit = this._namespaceList.length - 1;\n        if (limit >= 0) {\n            let /** @type {?} */ found = false;\n            for (let /** @type {?} */ i = limit; i >= 0; i--) {\n                const /** @type {?} */ nextNamespace = this._namespaceList[i];\n                if (this.driver.containsElement(nextNamespace.hostElement, hostElement)) {\n                    this._namespaceList.splice(i + 1, 0, ns);\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                this._namespaceList.splice(0, 0, ns);\n            }\n        }\n        else {\n            this._namespaceList.push(ns);\n        }\n        this.namespacesByHostElement.set(hostElement, ns);\n        return ns;\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} hostElement\n     * @return {?}\n     */\n    register(namespaceId, hostElement) {\n        let /** @type {?} */ ns = this._namespaceLookup[namespaceId];\n        if (!ns) {\n            ns = this.createNamespace(namespaceId, hostElement);\n        }\n        return ns;\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} name\n     * @param {?} trigger\n     * @return {?}\n     */\n    registerTrigger(namespaceId, name, trigger) {\n        let /** @type {?} */ ns = this._namespaceLookup[namespaceId];\n        if (ns && ns.register(name, trigger)) {\n            this.totalAnimations++;\n        }\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} context\n     * @return {?}\n     */\n    destroy(namespaceId, context) {\n        if (!namespaceId)\n            return;\n        const /** @type {?} */ ns = this._fetchNamespace(namespaceId);\n        this.afterFlush(() => {\n            this.namespacesByHostElement.delete(ns.hostElement);\n            delete this._namespaceLookup[namespaceId];\n            const /** @type {?} */ index = this._namespaceList.indexOf(ns);\n            if (index >= 0) {\n                this._namespaceList.splice(index, 1);\n            }\n        });\n        this.afterFlushAnimationsDone(() => ns.destroy(context));\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    _fetchNamespace(id) { return this._namespaceLookup[id]; }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    fetchNamespacesByElement(element) {\n        // normally there should only be one namespace per element, however\n        // if @triggers are placed on both the component element and then\n        // its host element (within the component code) then there will be\n        // two namespaces returned. We use a set here to simply the dedupe\n        // of namespaces incase there are multiple triggers both the elm and host\n        const /** @type {?} */ namespaces = new Set();\n        const /** @type {?} */ elementStates = this.statesByElement.get(element);\n        if (elementStates) {\n            const /** @type {?} */ keys = Object.keys(elementStates);\n            for (let /** @type {?} */ i = 0; i < keys.length; i++) {\n                const /** @type {?} */ nsId = elementStates[keys[i]].namespaceId;\n                if (nsId) {\n                    const /** @type {?} */ ns = this._fetchNamespace(nsId);\n                    if (ns) {\n                        namespaces.add(ns);\n                    }\n                }\n            }\n        }\n        return namespaces;\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    trigger(namespaceId, element, name, value) {\n        if (isElementNode(element)) {\n            this._fetchNamespace(namespaceId).trigger(element, name, value);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} parent\n     * @param {?} insertBefore\n     * @return {?}\n     */\n    insertNode(namespaceId, element, parent, insertBefore) {\n        if (!isElementNode(element))\n            return;\n        // special case for when an element is removed and reinserted (move operation)\n        // when this occurs we do not want to use the element for deletion later\n        const /** @type {?} */ details = /** @type {?} */ (element[REMOVAL_FLAG]);\n        if (details && details.setForRemoval) {\n            details.setForRemoval = false;\n        }\n        // in the event that the namespaceId is blank then the caller\n        // code does not contain any animation code in it, but it is\n        // just being called so that the node is marked as being inserted\n        if (namespaceId) {\n            this._fetchNamespace(namespaceId).insertNode(element, parent);\n        }\n        // only *directives and host elements are inserted before\n        if (insertBefore) {\n            this.collectEnterElement(element);\n        }\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    collectEnterElement(element) { this.collectedEnterElements.push(element); }\n    /**\n     * @param {?} element\n     * @param {?} value\n     * @return {?}\n     */\n    markElementAsDisabled(element, value) {\n        if (value) {\n            if (!this.disabledNodes.has(element)) {\n                this.disabledNodes.add(element);\n                addClass(element, DISABLED_CLASSNAME);\n            }\n        }\n        else if (this.disabledNodes.has(element)) {\n            this.disabledNodes.delete(element);\n            removeClass(element, DISABLED_CLASSNAME);\n        }\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    removeNode(namespaceId, element, context) {\n        if (!isElementNode(element)) {\n            this._onRemovalComplete(element, context);\n            return;\n        }\n        const /** @type {?} */ ns = namespaceId ? this._fetchNamespace(namespaceId) : null;\n        if (ns) {\n            ns.removeNode(element, context);\n        }\n        else {\n            this.markElementAsRemoved(namespaceId, element, false, context);\n        }\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?=} hasAnimation\n     * @param {?=} context\n     * @return {?}\n     */\n    markElementAsRemoved(namespaceId, element, hasAnimation, context) {\n        this.collectedLeaveElements.push(element);\n        element[REMOVAL_FLAG] = {\n            namespaceId,\n            setForRemoval: context, hasAnimation,\n            removedBeforeQueried: false\n        };\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} name\n     * @param {?} phase\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(namespaceId, element, name, phase, callback) {\n        if (isElementNode(element)) {\n            return this._fetchNamespace(namespaceId).listen(element, name, phase, callback);\n        }\n        return () => { };\n    }\n    /**\n     * @param {?} entry\n     * @param {?} subTimelines\n     * @param {?} enterClassName\n     * @param {?} leaveClassName\n     * @return {?}\n     */\n    _buildInstruction(entry, subTimelines, enterClassName, leaveClassName) {\n        return entry.transition.build(this.driver, entry.element, entry.fromState.value, entry.toState.value, enterClassName, leaveClassName, entry.fromState.options, entry.toState.options, subTimelines);\n    }\n    /**\n     * @param {?} containerElement\n     * @return {?}\n     */\n    destroyInnerAnimations(containerElement) {\n        let /** @type {?} */ elements = this.driver.query(containerElement, NG_TRIGGER_SELECTOR, true);\n        elements.forEach(element => this.destroyActiveAnimationsForElement(element));\n        if (this.playersByQueriedElement.size == 0)\n            return;\n        elements = this.driver.query(containerElement, NG_ANIMATING_SELECTOR, true);\n        elements.forEach(element => this.finishActiveQueriedAnimationOnElement(element));\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    destroyActiveAnimationsForElement(element) {\n        const /** @type {?} */ players = this.playersByElement.get(element);\n        if (players) {\n            players.forEach(player => {\n                // special case for when an element is set for destruction, but hasn't started.\n                // in this situation we want to delay the destruction until the flush occurs\n                // so that any event listeners attached to the player are triggered.\n                if (player.queued) {\n                    player.markedForDestroy = true;\n                }\n                else {\n                    player.destroy();\n                }\n            });\n        }\n        const /** @type {?} */ stateMap = this.statesByElement.get(element);\n        if (stateMap) {\n            Object.keys(stateMap).forEach(triggerName => stateMap[triggerName] = DELETED_STATE_VALUE);\n        }\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    finishActiveQueriedAnimationOnElement(element) {\n        const /** @type {?} */ players = this.playersByQueriedElement.get(element);\n        if (players) {\n            players.forEach(player => player.finish());\n        }\n    }\n    /**\n     * @return {?}\n     */\n    whenRenderingDone() {\n        return new Promise(resolve => {\n            if (this.players.length) {\n                return optimizeGroupPlayer(this.players).onDone(() => resolve());\n            }\n            else {\n                resolve();\n            }\n        });\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    processLeaveNode(element) {\n        const /** @type {?} */ details = /** @type {?} */ (element[REMOVAL_FLAG]);\n        if (details && details.setForRemoval) {\n            // this will prevent it from removing it twice\n            element[REMOVAL_FLAG] = NULL_REMOVAL_STATE;\n            if (details.namespaceId) {\n                this.destroyInnerAnimations(element);\n                const /** @type {?} */ ns = this._fetchNamespace(details.namespaceId);\n                if (ns) {\n                    ns.clearElementCache(element);\n                }\n            }\n            this._onRemovalComplete(element, details.setForRemoval);\n        }\n        if (this.driver.matchesElement(element, DISABLED_SELECTOR)) {\n            this.markElementAsDisabled(element, false);\n        }\n        this.driver.query(element, DISABLED_SELECTOR, true).forEach(node => {\n            this.markElementAsDisabled(element, false);\n        });\n    }\n    /**\n     * @param {?=} microtaskId\n     * @return {?}\n     */\n    flush(microtaskId = -1) {\n        let /** @type {?} */ players = [];\n        if (this.newHostElements.size) {\n            this.newHostElements.forEach((ns, element) => this._balanceNamespaceList(ns, element));\n            this.newHostElements.clear();\n        }\n        if (this.totalAnimations && this.collectedEnterElements.length) {\n            for (let /** @type {?} */ i = 0; i < this.collectedEnterElements.length; i++) {\n                const /** @type {?} */ elm = this.collectedEnterElements[i];\n                addClass(elm, STAR_CLASSNAME);\n            }\n        }\n        if (this._namespaceList.length &&\n            (this.totalQueuedPlayers || this.collectedLeaveElements.length)) {\n            const /** @type {?} */ cleanupFns = [];\n            try {\n                players = this._flushAnimations(cleanupFns, microtaskId);\n            }\n            finally {\n                for (let /** @type {?} */ i = 0; i < cleanupFns.length; i++) {\n                    cleanupFns[i]();\n                }\n            }\n        }\n        else {\n            for (let /** @type {?} */ i = 0; i < this.collectedLeaveElements.length; i++) {\n                const /** @type {?} */ element = this.collectedLeaveElements[i];\n                this.processLeaveNode(element);\n            }\n        }\n        this.totalQueuedPlayers = 0;\n        this.collectedEnterElements.length = 0;\n        this.collectedLeaveElements.length = 0;\n        this._flushFns.forEach(fn => fn());\n        this._flushFns = [];\n        if (this._whenQuietFns.length) {\n            // we move these over to a variable so that\n            // if any new callbacks are registered in another\n            // flush they do not populate the existing set\n            const /** @type {?} */ quietFns = this._whenQuietFns;\n            this._whenQuietFns = [];\n            if (players.length) {\n                optimizeGroupPlayer(players).onDone(() => { quietFns.forEach(fn => fn()); });\n            }\n            else {\n                quietFns.forEach(fn => fn());\n            }\n        }\n    }\n    /**\n     * @param {?} errors\n     * @return {?}\n     */\n    reportError(errors) {\n        throw new Error(`Unable to process animations due to the following failed trigger transitions\\n ${errors.join('\\n')}`);\n    }\n    /**\n     * @param {?} cleanupFns\n     * @param {?} microtaskId\n     * @return {?}\n     */\n    _flushAnimations(cleanupFns, microtaskId) {\n        const /** @type {?} */ subTimelines = new ElementInstructionMap();\n        const /** @type {?} */ skippedPlayers = [];\n        const /** @type {?} */ skippedPlayersMap = new Map();\n        const /** @type {?} */ queuedInstructions = [];\n        const /** @type {?} */ queriedElements = new Map();\n        const /** @type {?} */ allPreStyleElements = new Map();\n        const /** @type {?} */ allPostStyleElements = new Map();\n        const /** @type {?} */ disabledElementsSet = new Set();\n        this.disabledNodes.forEach(node => {\n            disabledElementsSet.add(node);\n            const /** @type {?} */ nodesThatAreDisabled = this.driver.query(node, QUEUED_SELECTOR, true);\n            for (let /** @type {?} */ i = 0; i < nodesThatAreDisabled.length; i++) {\n                disabledElementsSet.add(nodesThatAreDisabled[i]);\n            }\n        });\n        const /** @type {?} */ bodyNode = getBodyNode();\n        const /** @type {?} */ allTriggerElements = Array.from(this.statesByElement.keys());\n        const /** @type {?} */ enterNodeMap = buildRootMap(allTriggerElements, this.collectedEnterElements);\n        // this must occur before the instructions are built below such that\n        // the :enter queries match the elements (since the timeline queries\n        // are fired during instruction building).\n        const /** @type {?} */ enterNodeMapIds = new Map();\n        let /** @type {?} */ i = 0;\n        enterNodeMap.forEach((nodes, root) => {\n            const /** @type {?} */ className = ENTER_CLASSNAME + i++;\n            enterNodeMapIds.set(root, className);\n            nodes.forEach(node => addClass(node, className));\n        });\n        const /** @type {?} */ allLeaveNodes = [];\n        const /** @type {?} */ mergedLeaveNodes = new Set();\n        const /** @type {?} */ leaveNodesWithoutAnimations = new Set();\n        for (let /** @type {?} */ i = 0; i < this.collectedLeaveElements.length; i++) {\n            const /** @type {?} */ element = this.collectedLeaveElements[i];\n            const /** @type {?} */ details = /** @type {?} */ (element[REMOVAL_FLAG]);\n            if (details && details.setForRemoval) {\n                allLeaveNodes.push(element);\n                mergedLeaveNodes.add(element);\n                if (details.hasAnimation) {\n                    this.driver.query(element, STAR_SELECTOR, true).forEach(elm => mergedLeaveNodes.add(elm));\n                }\n                else {\n                    leaveNodesWithoutAnimations.add(element);\n                }\n            }\n        }\n        const /** @type {?} */ leaveNodeMapIds = new Map();\n        const /** @type {?} */ leaveNodeMap = buildRootMap(allTriggerElements, Array.from(mergedLeaveNodes));\n        leaveNodeMap.forEach((nodes, root) => {\n            const /** @type {?} */ className = LEAVE_CLASSNAME + i++;\n            leaveNodeMapIds.set(root, className);\n            nodes.forEach(node => addClass(node, className));\n        });\n        cleanupFns.push(() => {\n            enterNodeMap.forEach((nodes, root) => {\n                const /** @type {?} */ className = /** @type {?} */ ((enterNodeMapIds.get(root)));\n                nodes.forEach(node => removeClass(node, className));\n            });\n            leaveNodeMap.forEach((nodes, root) => {\n                const /** @type {?} */ className = /** @type {?} */ ((leaveNodeMapIds.get(root)));\n                nodes.forEach(node => removeClass(node, className));\n            });\n            allLeaveNodes.forEach(element => { this.processLeaveNode(element); });\n        });\n        const /** @type {?} */ allPlayers = [];\n        const /** @type {?} */ erroneousTransitions = [];\n        for (let /** @type {?} */ i = this._namespaceList.length - 1; i >= 0; i--) {\n            const /** @type {?} */ ns = this._namespaceList[i];\n            ns.drainQueuedTransitions(microtaskId).forEach(entry => {\n                const /** @type {?} */ player = entry.player;\n                allPlayers.push(player);\n                const /** @type {?} */ element = entry.element;\n                if (!bodyNode || !this.driver.containsElement(bodyNode, element)) {\n                    player.destroy();\n                    return;\n                }\n                const /** @type {?} */ leaveClassName = /** @type {?} */ ((leaveNodeMapIds.get(element)));\n                const /** @type {?} */ enterClassName = /** @type {?} */ ((enterNodeMapIds.get(element)));\n                const /** @type {?} */ instruction = /** @type {?} */ ((this._buildInstruction(entry, subTimelines, enterClassName, leaveClassName)));\n                if (instruction.errors && instruction.errors.length) {\n                    erroneousTransitions.push(instruction);\n                    return;\n                }\n                // if a unmatched transition is queued to go then it SHOULD NOT render\n                // an animation and cancel the previously running animations.\n                if (entry.isFallbackTransition) {\n                    player.onStart(() => eraseStyles(element, instruction.fromStyles));\n                    player.onDestroy(() => setStyles(element, instruction.toStyles));\n                    skippedPlayers.push(player);\n                    return;\n                }\n                // this means that if a parent animation uses this animation as a sub trigger\n                // then it will instruct the timeline builder to not add a player delay, but\n                // instead stretch the first keyframe gap up until the animation starts. The\n                // reason this is important is to prevent extra initialization styles from being\n                // required by the user in the animation.\n                instruction.timelines.forEach(tl => tl.stretchStartingKeyframe = true);\n                subTimelines.append(element, instruction.timelines);\n                const /** @type {?} */ tuple = { instruction, player, element };\n                queuedInstructions.push(tuple);\n                instruction.queriedElements.forEach(element => getOrSetAsInMap(queriedElements, element, []).push(player));\n                instruction.preStyleProps.forEach((stringMap, element) => {\n                    const /** @type {?} */ props = Object.keys(stringMap);\n                    if (props.length) {\n                        let /** @type {?} */ setVal = /** @type {?} */ ((allPreStyleElements.get(element)));\n                        if (!setVal) {\n                            allPreStyleElements.set(element, setVal = new Set());\n                        }\n                        props.forEach(prop => setVal.add(prop));\n                    }\n                });\n                instruction.postStyleProps.forEach((stringMap, element) => {\n                    const /** @type {?} */ props = Object.keys(stringMap);\n                    let /** @type {?} */ setVal = /** @type {?} */ ((allPostStyleElements.get(element)));\n                    if (!setVal) {\n                        allPostStyleElements.set(element, setVal = new Set());\n                    }\n                    props.forEach(prop => setVal.add(prop));\n                });\n            });\n        }\n        if (erroneousTransitions.length) {\n            const /** @type {?} */ errors = [];\n            erroneousTransitions.forEach(instruction => {\n                errors.push(`@${instruction.triggerName} has failed due to:\\n`); /** @type {?} */\n                ((instruction.errors)).forEach(error => errors.push(`- ${error}\\n`));\n            });\n            allPlayers.forEach(player => player.destroy());\n            this.reportError(errors);\n        }\n        const /** @type {?} */ allPreviousPlayersMap = new Map();\n        // this map works to tell which element in the DOM tree is contained by\n        // which animation. Further down below this map will get populated once\n        // the players are built and in doing so it can efficiently figure out\n        // if a sub player is skipped due to a parent player having priority.\n        const /** @type {?} */ animationElementMap = new Map();\n        queuedInstructions.forEach(entry => {\n            const /** @type {?} */ element = entry.element;\n            if (subTimelines.has(element)) {\n                animationElementMap.set(element, element);\n                this._beforeAnimationBuild(entry.player.namespaceId, entry.instruction, allPreviousPlayersMap);\n            }\n        });\n        skippedPlayers.forEach(player => {\n            const /** @type {?} */ element = player.element;\n            const /** @type {?} */ previousPlayers = this._getPreviousPlayers(element, false, player.namespaceId, player.triggerName, null);\n            previousPlayers.forEach(prevPlayer => {\n                getOrSetAsInMap(allPreviousPlayersMap, element, []).push(prevPlayer);\n                prevPlayer.destroy();\n            });\n        });\n        // this is a special case for nodes that will be removed (either by)\n        // having their own leave animations or by being queried in a container\n        // that will be removed once a parent animation is complete. The idea\n        // here is that * styles must be identical to ! styles because of\n        // backwards compatibility (* is also filled in by default in many places).\n        // Otherwise * styles will return an empty value or auto since the element\n        // that is being getComputedStyle'd will not be visible (since * = destination)\n        const /** @type {?} */ replaceNodes = allLeaveNodes.filter(node => {\n            return replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements);\n        });\n        // POST STAGE: fill the * styles\n        const /** @type {?} */ postStylesMap = new Map();\n        const /** @type {?} */ allLeaveQueriedNodes = cloakAndComputeStyles(postStylesMap, this.driver, leaveNodesWithoutAnimations, allPostStyleElements, AUTO_STYLE);\n        allLeaveQueriedNodes.forEach(node => {\n            if (replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements)) {\n                replaceNodes.push(node);\n            }\n        });\n        // PRE STAGE: fill the ! styles\n        const /** @type {?} */ preStylesMap = new Map();\n        enterNodeMap.forEach((nodes, root) => {\n            cloakAndComputeStyles(preStylesMap, this.driver, new Set(nodes), allPreStyleElements, ɵPRE_STYLE);\n        });\n        replaceNodes.forEach(node => {\n            const /** @type {?} */ post = postStylesMap.get(node);\n            const /** @type {?} */ pre = preStylesMap.get(node);\n            postStylesMap.set(node, /** @type {?} */ (Object.assign({}, post, pre)));\n        });\n        const /** @type {?} */ rootPlayers = [];\n        const /** @type {?} */ subPlayers = [];\n        const /** @type {?} */ NO_PARENT_ANIMATION_ELEMENT_DETECTED = {};\n        queuedInstructions.forEach(entry => {\n            const { element, player, instruction } = entry;\n            // this means that it was never consumed by a parent animation which\n            // means that it is independent and therefore should be set for animation\n            if (subTimelines.has(element)) {\n                if (disabledElementsSet.has(element)) {\n                    player.onDestroy(() => setStyles(element, instruction.toStyles));\n                    skippedPlayers.push(player);\n                    return;\n                }\n                // this will flow up the DOM and query the map to figure out\n                // if a parent animation has priority over it. In the situation\n                // that a parent is detected then it will cancel the loop. If\n                // nothing is detected, or it takes a few hops to find a parent,\n                // then it will fill in the missing nodes and signal them as having\n                // a detected parent (or a NO_PARENT value via a special constant).\n                let /** @type {?} */ parentWithAnimation = NO_PARENT_ANIMATION_ELEMENT_DETECTED;\n                if (animationElementMap.size > 1) {\n                    let /** @type {?} */ elm = element;\n                    const /** @type {?} */ parentsToAdd = [];\n                    while (elm = elm.parentNode) {\n                        const /** @type {?} */ detectedParent = animationElementMap.get(elm);\n                        if (detectedParent) {\n                            parentWithAnimation = detectedParent;\n                            break;\n                        }\n                        parentsToAdd.push(elm);\n                    }\n                    parentsToAdd.forEach(parent => animationElementMap.set(parent, parentWithAnimation));\n                }\n                const /** @type {?} */ innerPlayer = this._buildAnimation(player.namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap);\n                player.setRealPlayer(innerPlayer);\n                if (parentWithAnimation === NO_PARENT_ANIMATION_ELEMENT_DETECTED) {\n                    rootPlayers.push(player);\n                }\n                else {\n                    const /** @type {?} */ parentPlayers = this.playersByElement.get(parentWithAnimation);\n                    if (parentPlayers && parentPlayers.length) {\n                        player.parentPlayer = optimizeGroupPlayer(parentPlayers);\n                    }\n                    skippedPlayers.push(player);\n                }\n            }\n            else {\n                eraseStyles(element, instruction.fromStyles);\n                player.onDestroy(() => setStyles(element, instruction.toStyles));\n                // there still might be a ancestor player animating this\n                // element therefore we will still add it as a sub player\n                // even if its animation may be disabled\n                subPlayers.push(player);\n                if (disabledElementsSet.has(element)) {\n                    skippedPlayers.push(player);\n                }\n            }\n        });\n        // find all of the sub players' corresponding inner animation player\n        subPlayers.forEach(player => {\n            // even if any players are not found for a sub animation then it\n            // will still complete itself after the next tick since it's Noop\n            const /** @type {?} */ playersForElement = skippedPlayersMap.get(player.element);\n            if (playersForElement && playersForElement.length) {\n                const /** @type {?} */ innerPlayer = optimizeGroupPlayer(playersForElement);\n                player.setRealPlayer(innerPlayer);\n            }\n        });\n        // the reason why we don't actually play the animation is\n        // because all that a skipped player is designed to do is to\n        // fire the start/done transition callback events\n        skippedPlayers.forEach(player => {\n            if (player.parentPlayer) {\n                player.syncPlayerEvents(player.parentPlayer);\n            }\n            else {\n                player.destroy();\n            }\n        });\n        // run through all of the queued removals and see if they\n        // were picked up by a query. If not then perform the removal\n        // operation right away unless a parent animation is ongoing.\n        for (let /** @type {?} */ i = 0; i < allLeaveNodes.length; i++) {\n            const /** @type {?} */ element = allLeaveNodes[i];\n            const /** @type {?} */ details = /** @type {?} */ (element[REMOVAL_FLAG]);\n            removeClass(element, LEAVE_CLASSNAME);\n            // this means the element has a removal animation that is being\n            // taken care of and therefore the inner elements will hang around\n            // until that animation is over (or the parent queried animation)\n            if (details && details.hasAnimation)\n                continue;\n            let /** @type {?} */ players = [];\n            // if this element is queried or if it contains queried children\n            // then we want for the element not to be removed from the page\n            // until the queried animations have finished\n            if (queriedElements.size) {\n                let /** @type {?} */ queriedPlayerResults = queriedElements.get(element);\n                if (queriedPlayerResults && queriedPlayerResults.length) {\n                    players.push(...queriedPlayerResults);\n                }\n                let /** @type {?} */ queriedInnerElements = this.driver.query(element, NG_ANIMATING_SELECTOR, true);\n                for (let /** @type {?} */ j = 0; j < queriedInnerElements.length; j++) {\n                    let /** @type {?} */ queriedPlayers = queriedElements.get(queriedInnerElements[j]);\n                    if (queriedPlayers && queriedPlayers.length) {\n                        players.push(...queriedPlayers);\n                    }\n                }\n            }\n            const /** @type {?} */ activePlayers = players.filter(p => !p.destroyed);\n            if (activePlayers.length) {\n                removeNodesAfterAnimationDone(this, element, activePlayers);\n            }\n            else {\n                this.processLeaveNode(element);\n            }\n        }\n        // this is required so the cleanup method doesn't remove them\n        allLeaveNodes.length = 0;\n        rootPlayers.forEach(player => {\n            this.players.push(player);\n            player.onDone(() => {\n                player.destroy();\n                const /** @type {?} */ index = this.players.indexOf(player);\n                this.players.splice(index, 1);\n            });\n            player.play();\n        });\n        return rootPlayers;\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @return {?}\n     */\n    elementContainsData(namespaceId, element) {\n        let /** @type {?} */ containsData = false;\n        const /** @type {?} */ details = /** @type {?} */ (element[REMOVAL_FLAG]);\n        if (details && details.setForRemoval)\n            containsData = true;\n        if (this.playersByElement.has(element))\n            containsData = true;\n        if (this.playersByQueriedElement.has(element))\n            containsData = true;\n        if (this.statesByElement.has(element))\n            containsData = true;\n        return this._fetchNamespace(namespaceId).elementContainsData(element) || containsData;\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    afterFlush(callback) { this._flushFns.push(callback); }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    afterFlushAnimationsDone(callback) { this._whenQuietFns.push(callback); }\n    /**\n     * @param {?} element\n     * @param {?} isQueriedElement\n     * @param {?=} namespaceId\n     * @param {?=} triggerName\n     * @param {?=} toStateValue\n     * @return {?}\n     */\n    _getPreviousPlayers(element, isQueriedElement, namespaceId, triggerName, toStateValue) {\n        let /** @type {?} */ players = [];\n        if (isQueriedElement) {\n            const /** @type {?} */ queriedElementPlayers = this.playersByQueriedElement.get(element);\n            if (queriedElementPlayers) {\n                players = queriedElementPlayers;\n            }\n        }\n        else {\n            const /** @type {?} */ elementPlayers = this.playersByElement.get(element);\n            if (elementPlayers) {\n                const /** @type {?} */ isRemovalAnimation = !toStateValue || toStateValue == VOID_VALUE;\n                elementPlayers.forEach(player => {\n                    if (player.queued)\n                        return;\n                    if (!isRemovalAnimation && player.triggerName != triggerName)\n                        return;\n                    players.push(player);\n                });\n            }\n        }\n        if (namespaceId || triggerName) {\n            players = players.filter(player => {\n                if (namespaceId && namespaceId != player.namespaceId)\n                    return false;\n                if (triggerName && triggerName != player.triggerName)\n                    return false;\n                return true;\n            });\n        }\n        return players;\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} instruction\n     * @param {?} allPreviousPlayersMap\n     * @return {?}\n     */\n    _beforeAnimationBuild(namespaceId, instruction, allPreviousPlayersMap) {\n        const /** @type {?} */ triggerName = instruction.triggerName;\n        const /** @type {?} */ rootElement = instruction.element;\n        // when a removal animation occurs, ALL previous players are collected\n        // and destroyed (even if they are outside of the current namespace)\n        const /** @type {?} */ targetNameSpaceId = instruction.isRemovalTransition ? undefined : namespaceId;\n        const /** @type {?} */ targetTriggerName = instruction.isRemovalTransition ? undefined : triggerName;\n        for (const /** @type {?} */ timelineInstruction of instruction.timelines) {\n            const /** @type {?} */ element = timelineInstruction.element;\n            const /** @type {?} */ isQueriedElement = element !== rootElement;\n            const /** @type {?} */ players = getOrSetAsInMap(allPreviousPlayersMap, element, []);\n            const /** @type {?} */ previousPlayers = this._getPreviousPlayers(element, isQueriedElement, targetNameSpaceId, targetTriggerName, instruction.toState);\n            previousPlayers.forEach(player => {\n                const /** @type {?} */ realPlayer = /** @type {?} */ (player.getRealPlayer());\n                if (realPlayer.beforeDestroy) {\n                    realPlayer.beforeDestroy();\n                }\n                player.destroy();\n                players.push(player);\n            });\n        }\n        // this needs to be done so that the PRE/POST styles can be\n        // computed properly without interfering with the previous animation\n        eraseStyles(rootElement, instruction.fromStyles);\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} instruction\n     * @param {?} allPreviousPlayersMap\n     * @param {?} skippedPlayersMap\n     * @param {?} preStylesMap\n     * @param {?} postStylesMap\n     * @return {?}\n     */\n    _buildAnimation(namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap) {\n        const /** @type {?} */ triggerName = instruction.triggerName;\n        const /** @type {?} */ rootElement = instruction.element;\n        // we first run this so that the previous animation player\n        // data can be passed into the successive animation players\n        const /** @type {?} */ allQueriedPlayers = [];\n        const /** @type {?} */ allConsumedElements = new Set();\n        const /** @type {?} */ allSubElements = new Set();\n        const /** @type {?} */ allNewPlayers = instruction.timelines.map(timelineInstruction => {\n            const /** @type {?} */ element = timelineInstruction.element;\n            allConsumedElements.add(element);\n            // FIXME (matsko): make sure to-be-removed animations are removed properly\n            const /** @type {?} */ details = element[REMOVAL_FLAG];\n            if (details && details.removedBeforeQueried)\n                return new NoopAnimationPlayer();\n            const /** @type {?} */ isQueriedElement = element !== rootElement;\n            const /** @type {?} */ previousPlayers = flattenGroupPlayers((allPreviousPlayersMap.get(element) || EMPTY_PLAYER_ARRAY)\n                .map(p => p.getRealPlayer()))\n                .filter(p => {\n                // the `element` is not apart of the AnimationPlayer definition, but\n                // Mock/WebAnimations\n                // use the element within their implementation. This will be added in Angular5 to\n                // AnimationPlayer\n                const /** @type {?} */ pp = /** @type {?} */ (p);\n                return pp.element ? pp.element === element : false;\n            });\n            const /** @type {?} */ preStyles = preStylesMap.get(element);\n            const /** @type {?} */ postStyles = postStylesMap.get(element);\n            const /** @type {?} */ keyframes = normalizeKeyframes(this.driver, this._normalizer, element, timelineInstruction.keyframes, preStyles, postStyles);\n            const /** @type {?} */ player = this._buildPlayer(timelineInstruction, keyframes, previousPlayers);\n            // this means that this particular player belongs to a sub trigger. It is\n            // important that we match this player up with the corresponding (@trigger.listener)\n            if (timelineInstruction.subTimeline && skippedPlayersMap) {\n                allSubElements.add(element);\n            }\n            if (isQueriedElement) {\n                const /** @type {?} */ wrappedPlayer = new TransitionAnimationPlayer(namespaceId, triggerName, element);\n                wrappedPlayer.setRealPlayer(player);\n                allQueriedPlayers.push(wrappedPlayer);\n            }\n            return player;\n        });\n        allQueriedPlayers.forEach(player => {\n            getOrSetAsInMap(this.playersByQueriedElement, player.element, []).push(player);\n            player.onDone(() => deleteOrUnsetInMap(this.playersByQueriedElement, player.element, player));\n        });\n        allConsumedElements.forEach(element => addClass(element, NG_ANIMATING_CLASSNAME));\n        const /** @type {?} */ player = optimizeGroupPlayer(allNewPlayers);\n        player.onDestroy(() => {\n            allConsumedElements.forEach(element => removeClass(element, NG_ANIMATING_CLASSNAME));\n            setStyles(rootElement, instruction.toStyles);\n        });\n        // this basically makes all of the callbacks for sub element animations\n        // be dependent on the upper players for when they finish\n        allSubElements.forEach(element => { getOrSetAsInMap(skippedPlayersMap, element, []).push(player); });\n        return player;\n    }\n    /**\n     * @param {?} instruction\n     * @param {?} keyframes\n     * @param {?} previousPlayers\n     * @return {?}\n     */\n    _buildPlayer(instruction, keyframes, previousPlayers) {\n        if (keyframes.length > 0) {\n            return this.driver.animate(instruction.element, keyframes, instruction.duration, instruction.delay, instruction.easing, previousPlayers);\n        }\n        // special case for when an empty transition|definition is provided\n        // ... there is no point in rendering an empty animation\n        return new NoopAnimationPlayer();\n    }\n}\nclass TransitionAnimationPlayer {\n    /**\n     * @param {?} namespaceId\n     * @param {?} triggerName\n     * @param {?} element\n     */\n    constructor(namespaceId, triggerName, element) {\n        this.namespaceId = namespaceId;\n        this.triggerName = triggerName;\n        this.element = element;\n        this._player = new NoopAnimationPlayer();\n        this._containsRealPlayer = false;\n        this._queuedCallbacks = {};\n        this.destroyed = false;\n        this.markedForDestroy = false;\n        this.queued = true;\n    }\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    setRealPlayer(player) {\n        if (this._containsRealPlayer)\n            return;\n        this._player = player;\n        Object.keys(this._queuedCallbacks).forEach(phase => {\n            this._queuedCallbacks[phase].forEach(callback => listenOnPlayer(player, phase, undefined, callback));\n        });\n        this._queuedCallbacks = {};\n        this._containsRealPlayer = true;\n        (/** @type {?} */ (this)).queued = false;\n    }\n    /**\n     * @return {?}\n     */\n    getRealPlayer() { return this._player; }\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    syncPlayerEvents(player) {\n        const /** @type {?} */ p = /** @type {?} */ (this._player);\n        if (p.triggerCallback) {\n            player.onStart(() => p.triggerCallback('start'));\n        }\n        player.onDone(() => this.finish());\n        player.onDestroy(() => this.destroy());\n    }\n    /**\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    _queueEvent(name, callback) {\n        getOrSetAsInMap(this._queuedCallbacks, name, []).push(callback);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDone(fn) {\n        if (this.queued) {\n            this._queueEvent('done', fn);\n        }\n        this._player.onDone(fn);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onStart(fn) {\n        if (this.queued) {\n            this._queueEvent('start', fn);\n        }\n        this._player.onStart(fn);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDestroy(fn) {\n        if (this.queued) {\n            this._queueEvent('destroy', fn);\n        }\n        this._player.onDestroy(fn);\n    }\n    /**\n     * @return {?}\n     */\n    init() { this._player.init(); }\n    /**\n     * @return {?}\n     */\n    hasStarted() { return this.queued ? false : this._player.hasStarted(); }\n    /**\n     * @return {?}\n     */\n    play() { !this.queued && this._player.play(); }\n    /**\n     * @return {?}\n     */\n    pause() { !this.queued && this._player.pause(); }\n    /**\n     * @return {?}\n     */\n    restart() { !this.queued && this._player.restart(); }\n    /**\n     * @return {?}\n     */\n    finish() { this._player.finish(); }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        (/** @type {?} */ (this)).destroyed = true;\n        this._player.destroy();\n    }\n    /**\n     * @return {?}\n     */\n    reset() { !this.queued && this._player.reset(); }\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    setPosition(p) {\n        if (!this.queued) {\n            this._player.setPosition(p);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getPosition() { return this.queued ? 0 : this._player.getPosition(); }\n    /**\n     * @return {?}\n     */\n    get totalTime() { return this._player.totalTime; }\n    /**\n     * @param {?} phaseName\n     * @return {?}\n     */\n    triggerCallback(phaseName) {\n        const /** @type {?} */ p = /** @type {?} */ (this._player);\n        if (p.triggerCallback) {\n            p.triggerCallback(phaseName);\n        }\n    }\n}\n/**\n * @param {?} map\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nfunction deleteOrUnsetInMap(map, key, value) {\n    let /** @type {?} */ currentValues;\n    if (map instanceof Map) {\n        currentValues = map.get(key);\n        if (currentValues) {\n            if (currentValues.length) {\n                const /** @type {?} */ index = currentValues.indexOf(value);\n                currentValues.splice(index, 1);\n            }\n            if (currentValues.length == 0) {\n                map.delete(key);\n            }\n        }\n    }\n    else {\n        currentValues = map[key];\n        if (currentValues) {\n            if (currentValues.length) {\n                const /** @type {?} */ index = currentValues.indexOf(value);\n                currentValues.splice(index, 1);\n            }\n            if (currentValues.length == 0) {\n                delete map[key];\n            }\n        }\n    }\n    return currentValues;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction normalizeTriggerValue(value) {\n    // we use `!= null` here because it's the most simple\n    // way to test against a \"falsy\" value without mixing\n    // in empty strings or a zero value. DO NOT OPTIMIZE.\n    return value != null ? value : null;\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction isElementNode(node) {\n    return node && node['nodeType'] === 1;\n}\n/**\n * @param {?} eventName\n * @return {?}\n */\nfunction isTriggerEventValid(eventName) {\n    return eventName == 'start' || eventName == 'done';\n}\n/**\n * @param {?} element\n * @param {?=} value\n * @return {?}\n */\nfunction cloakElement(element, value) {\n    const /** @type {?} */ oldValue = element.style.display;\n    element.style.display = value != null ? value : 'none';\n    return oldValue;\n}\n/**\n * @param {?} valuesMap\n * @param {?} driver\n * @param {?} elements\n * @param {?} elementPropsMap\n * @param {?} defaultStyle\n * @return {?}\n */\nfunction cloakAndComputeStyles(valuesMap, driver, elements, elementPropsMap, defaultStyle) {\n    const /** @type {?} */ cloakVals = [];\n    elements.forEach(element => cloakVals.push(cloakElement(element)));\n    const /** @type {?} */ failedElements = [];\n    elementPropsMap.forEach((props, element) => {\n        const /** @type {?} */ styles = {};\n        props.forEach(prop => {\n            const /** @type {?} */ value = styles[prop] = driver.computeStyle(element, prop, defaultStyle);\n            // there is no easy way to detect this because a sub element could be removed\n            // by a parent animation element being detached.\n            if (!value || value.length == 0) {\n                element[REMOVAL_FLAG] = NULL_REMOVED_QUERIED_STATE;\n                failedElements.push(element);\n            }\n        });\n        valuesMap.set(element, styles);\n    });\n    // we use a index variable here since Set.forEach(a, i) does not return\n    // an index value for the closure (but instead just the value)\n    let /** @type {?} */ i = 0;\n    elements.forEach(element => cloakElement(element, cloakVals[i++]));\n    return failedElements;\n}\n/**\n * @param {?} roots\n * @param {?} nodes\n * @return {?}\n */\nfunction buildRootMap(roots, nodes) {\n    const /** @type {?} */ rootMap = new Map();\n    roots.forEach(root => rootMap.set(root, []));\n    if (nodes.length == 0)\n        return rootMap;\n    const /** @type {?} */ NULL_NODE = 1;\n    const /** @type {?} */ nodeSet = new Set(nodes);\n    const /** @type {?} */ localRootMap = new Map();\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    function getRoot(node) {\n        if (!node)\n            return NULL_NODE;\n        let /** @type {?} */ root = localRootMap.get(node);\n        if (root)\n            return root;\n        const /** @type {?} */ parent = node.parentNode;\n        if (rootMap.has(parent)) {\n            // ngIf inside @trigger\n            root = parent;\n        }\n        else if (nodeSet.has(parent)) {\n            // ngIf inside ngIf\n            root = NULL_NODE;\n        }\n        else {\n            // recurse upwards\n            root = getRoot(parent);\n        }\n        localRootMap.set(node, root);\n        return root;\n    }\n    nodes.forEach(node => {\n        const /** @type {?} */ root = getRoot(node);\n        if (root !== NULL_NODE) {\n            /** @type {?} */ ((rootMap.get(root))).push(node);\n        }\n    });\n    return rootMap;\n}\nconst CLASSES_CACHE_KEY = '$$classes';\n/**\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nfunction addClass(element, className) {\n    if (element.classList) {\n        element.classList.add(className);\n    }\n    else {\n        let /** @type {?} */ classes = element[CLASSES_CACHE_KEY];\n        if (!classes) {\n            classes = element[CLASSES_CACHE_KEY] = {};\n        }\n        classes[className] = true;\n    }\n}\n/**\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nfunction removeClass(element, className) {\n    if (element.classList) {\n        element.classList.remove(className);\n    }\n    else {\n        let /** @type {?} */ classes = element[CLASSES_CACHE_KEY];\n        if (classes) {\n            delete classes[className];\n        }\n    }\n}\n/**\n * @param {?} engine\n * @param {?} element\n * @param {?} players\n * @return {?}\n */\nfunction removeNodesAfterAnimationDone(engine, element, players) {\n    optimizeGroupPlayer(players).onDone(() => engine.processLeaveNode(element));\n}\n/**\n * @param {?} players\n * @return {?}\n */\nfunction flattenGroupPlayers(players) {\n    const /** @type {?} */ finalPlayers = [];\n    _flattenGroupPlayersRecur(players, finalPlayers);\n    return finalPlayers;\n}\n/**\n * @param {?} players\n * @param {?} finalPlayers\n * @return {?}\n */\nfunction _flattenGroupPlayersRecur(players, finalPlayers) {\n    for (let /** @type {?} */ i = 0; i < players.length; i++) {\n        const /** @type {?} */ player = players[i];\n        if (player instanceof ɵAnimationGroupPlayer) {\n            _flattenGroupPlayersRecur(player.players, finalPlayers);\n        }\n        else {\n            finalPlayers.push(/** @type {?} */ (player));\n        }\n    }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction objEquals(a, b) {\n    const /** @type {?} */ k1 = Object.keys(a);\n    const /** @type {?} */ k2 = Object.keys(b);\n    if (k1.length != k2.length)\n        return false;\n    for (let /** @type {?} */ i = 0; i < k1.length; i++) {\n        const /** @type {?} */ prop = k1[i];\n        if (!b.hasOwnProperty(prop) || a[prop] !== b[prop])\n            return false;\n    }\n    return true;\n}\n/**\n * @param {?} element\n * @param {?} allPreStyleElements\n * @param {?} allPostStyleElements\n * @return {?}\n */\nfunction replacePostStylesAsPre(element, allPreStyleElements, allPostStyleElements) {\n    const /** @type {?} */ postEntry = allPostStyleElements.get(element);\n    if (!postEntry)\n        return false;\n    let /** @type {?} */ preEntry = allPreStyleElements.get(element);\n    if (preEntry) {\n        postEntry.forEach(data => /** @type {?} */ ((preEntry)).add(data));\n    }\n    else {\n        allPreStyleElements.set(element, postEntry);\n    }\n    allPostStyleElements.delete(element);\n    return true;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass AnimationEngine {\n    /**\n     * @param {?} _driver\n     * @param {?} normalizer\n     */\n    constructor(_driver, normalizer) {\n        this._driver = _driver;\n        this._triggerCache = {};\n        this.onRemovalComplete = (element, context) => { };\n        this._transitionEngine = new TransitionAnimationEngine(_driver, normalizer);\n        this._timelineEngine = new TimelineAnimationEngine(_driver, normalizer);\n        this._transitionEngine.onRemovalComplete = (element, context) => this.onRemovalComplete(element, context);\n    }\n    /**\n     * @param {?} componentId\n     * @param {?} namespaceId\n     * @param {?} hostElement\n     * @param {?} name\n     * @param {?} metadata\n     * @return {?}\n     */\n    registerTrigger(componentId, namespaceId, hostElement, name, metadata) {\n        const /** @type {?} */ cacheKey = componentId + '-' + name;\n        let /** @type {?} */ trigger = this._triggerCache[cacheKey];\n        if (!trigger) {\n            const /** @type {?} */ errors = [];\n            const /** @type {?} */ ast = /** @type {?} */ (buildAnimationAst(this._driver, /** @type {?} */ (metadata), errors));\n            if (errors.length) {\n                throw new Error(`The animation trigger \"${name}\" has failed to build due to the following errors:\\n - ${errors.join(\"\\n - \")}`);\n            }\n            trigger = buildTrigger(name, ast);\n            this._triggerCache[cacheKey] = trigger;\n        }\n        this._transitionEngine.registerTrigger(namespaceId, name, trigger);\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} hostElement\n     * @return {?}\n     */\n    register(namespaceId, hostElement) {\n        this._transitionEngine.register(namespaceId, hostElement);\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} context\n     * @return {?}\n     */\n    destroy(namespaceId, context) {\n        this._transitionEngine.destroy(namespaceId, context);\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} parent\n     * @param {?} insertBefore\n     * @return {?}\n     */\n    onInsert(namespaceId, element, parent, insertBefore) {\n        this._transitionEngine.insertNode(namespaceId, element, parent, insertBefore);\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    onRemove(namespaceId, element, context) {\n        this._transitionEngine.removeNode(namespaceId, element, context);\n    }\n    /**\n     * @param {?} element\n     * @param {?} disable\n     * @return {?}\n     */\n    disableAnimations(element, disable) {\n        this._transitionEngine.markElementAsDisabled(element, disable);\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    process(namespaceId, element, property, value) {\n        if (property.charAt(0) == '@') {\n            const [id, action] = parseTimelineCommand(property);\n            const /** @type {?} */ args = /** @type {?} */ (value);\n            this._timelineEngine.command(id, element, action, args);\n        }\n        else {\n            this._transitionEngine.trigger(namespaceId, element, property, value);\n        }\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} eventPhase\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(namespaceId, element, eventName, eventPhase, callback) {\n        // @@listen\n        if (eventName.charAt(0) == '@') {\n            const [id, action] = parseTimelineCommand(eventName);\n            return this._timelineEngine.listen(id, element, action, callback);\n        }\n        return this._transitionEngine.listen(namespaceId, element, eventName, eventPhase, callback);\n    }\n    /**\n     * @param {?=} microtaskId\n     * @return {?}\n     */\n    flush(microtaskId = -1) { this._transitionEngine.flush(microtaskId); }\n    /**\n     * @return {?}\n     */\n    get players() {\n        return (/** @type {?} */ (this._transitionEngine.players))\n            .concat(/** @type {?} */ (this._timelineEngine.players));\n    }\n    /**\n     * @return {?}\n     */\n    whenRenderingDone() { return this._transitionEngine.whenRenderingDone(); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass WebAnimationsPlayer {\n    /**\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} options\n     * @param {?=} previousPlayers\n     */\n    constructor(element, keyframes, options, previousPlayers = []) {\n        this.element = element;\n        this.keyframes = keyframes;\n        this.options = options;\n        this.previousPlayers = previousPlayers;\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._onDestroyFns = [];\n        this._initialized = false;\n        this._finished = false;\n        this._started = false;\n        this._destroyed = false;\n        this.time = 0;\n        this.parentPlayer = null;\n        this.previousStyles = {};\n        this.currentSnapshot = {};\n        this._duration = /** @type {?} */ (options['duration']);\n        this._delay = /** @type {?} */ (options['delay']) || 0;\n        this.time = this._duration + this._delay;\n        if (allowPreviousPlayerStylesMerge(this._duration, this._delay)) {\n            previousPlayers.forEach(player => {\n                let /** @type {?} */ styles = player.currentSnapshot;\n                Object.keys(styles).forEach(prop => this.previousStyles[prop] = styles[prop]);\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onFinish() {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach(fn => fn());\n            this._onDoneFns = [];\n        }\n    }\n    /**\n     * @return {?}\n     */\n    init() {\n        this._buildPlayer();\n        this._preparePlayerBeforeStart();\n    }\n    /**\n     * @return {?}\n     */\n    _buildPlayer() {\n        if (this._initialized)\n            return;\n        this._initialized = true;\n        const /** @type {?} */ keyframes = this.keyframes.map(styles => copyStyles(styles, false));\n        const /** @type {?} */ previousStyleProps = Object.keys(this.previousStyles);\n        if (previousStyleProps.length && keyframes.length) {\n            let /** @type {?} */ startingKeyframe = keyframes[0];\n            let /** @type {?} */ missingStyleProps = [];\n            previousStyleProps.forEach(prop => {\n                if (!startingKeyframe.hasOwnProperty(prop)) {\n                    missingStyleProps.push(prop);\n                }\n                startingKeyframe[prop] = this.previousStyles[prop];\n            });\n            if (missingStyleProps.length) {\n                const /** @type {?} */ self = this;\n                // tslint:disable-next-line\n                for (var /** @type {?} */ i = 1; i < keyframes.length; i++) {\n                    let /** @type {?} */ kf = keyframes[i];\n                    missingStyleProps.forEach(function (prop) {\n                        kf[prop] = _computeStyle(self.element, prop);\n                    });\n                }\n            }\n        }\n        (/** @type {?} */ (this)).domPlayer =\n            this._triggerWebAnimation(this.element, keyframes, this.options);\n        this._finalKeyframe = keyframes.length ? keyframes[keyframes.length - 1] : {};\n        this.domPlayer.addEventListener('finish', () => this._onFinish());\n    }\n    /**\n     * @return {?}\n     */\n    _preparePlayerBeforeStart() {\n        // this is required so that the player doesn't start to animate right away\n        if (this._delay) {\n            this._resetDomPlayerState();\n        }\n        else {\n            this.domPlayer.pause();\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} options\n     * @return {?}\n     */\n    _triggerWebAnimation(element, keyframes, options) {\n        // jscompiler doesn't seem to know animate is a native property because it's not fully\n        // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]\n        return /** @type {?} */ (element['animate'](keyframes, options));\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onStart(fn) { this._onStartFns.push(fn); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDone(fn) { this._onDoneFns.push(fn); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDestroy(fn) { this._onDestroyFns.push(fn); }\n    /**\n     * @return {?}\n     */\n    play() {\n        this._buildPlayer();\n        if (!this.hasStarted()) {\n            this._onStartFns.forEach(fn => fn());\n            this._onStartFns = [];\n            this._started = true;\n        }\n        this.domPlayer.play();\n    }\n    /**\n     * @return {?}\n     */\n    pause() {\n        this.init();\n        this.domPlayer.pause();\n    }\n    /**\n     * @return {?}\n     */\n    finish() {\n        this.init();\n        this._onFinish();\n        this.domPlayer.finish();\n    }\n    /**\n     * @return {?}\n     */\n    reset() {\n        this._resetDomPlayerState();\n        this._destroyed = false;\n        this._finished = false;\n        this._started = false;\n    }\n    /**\n     * @return {?}\n     */\n    _resetDomPlayerState() {\n        if (this.domPlayer) {\n            this.domPlayer.cancel();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    restart() {\n        this.reset();\n        this.play();\n    }\n    /**\n     * @return {?}\n     */\n    hasStarted() { return this._started; }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (!this._destroyed) {\n            this._destroyed = true;\n            this._resetDomPlayerState();\n            this._onFinish();\n            this._onDestroyFns.forEach(fn => fn());\n            this._onDestroyFns = [];\n        }\n    }\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    setPosition(p) { this.domPlayer.currentTime = p * this.time; }\n    /**\n     * @return {?}\n     */\n    getPosition() { return this.domPlayer.currentTime / this.time; }\n    /**\n     * @return {?}\n     */\n    get totalTime() { return this._delay + this._duration; }\n    /**\n     * @return {?}\n     */\n    beforeDestroy() {\n        const /** @type {?} */ styles = {};\n        if (this.hasStarted()) {\n            Object.keys(this._finalKeyframe).forEach(prop => {\n                if (prop != 'offset') {\n                    styles[prop] =\n                        this._finished ? this._finalKeyframe[prop] : _computeStyle(this.element, prop);\n                }\n            });\n        }\n        this.currentSnapshot = styles;\n    }\n    /**\n     * @param {?} phaseName\n     * @return {?}\n     */\n    triggerCallback(phaseName) {\n        const /** @type {?} */ methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n        methods.forEach(fn => fn());\n        methods.length = 0;\n    }\n}\n/**\n * @param {?} element\n * @param {?} prop\n * @return {?}\n */\nfunction _computeStyle(element, prop) {\n    return (/** @type {?} */ (window.getComputedStyle(element)))[prop];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass WebAnimationsDriver {\n    /**\n     * @param {?} prop\n     * @return {?}\n     */\n    validateStyleProperty(prop) { return validateStyleProperty(prop); }\n    /**\n     * @param {?} element\n     * @param {?} selector\n     * @return {?}\n     */\n    matchesElement(element, selector) {\n        return matchesElement(element, selector);\n    }\n    /**\n     * @param {?} elm1\n     * @param {?} elm2\n     * @return {?}\n     */\n    containsElement(elm1, elm2) { return containsElement(elm1, elm2); }\n    /**\n     * @param {?} element\n     * @param {?} selector\n     * @param {?} multi\n     * @return {?}\n     */\n    query(element, selector, multi) {\n        return invokeQuery(element, selector, multi);\n    }\n    /**\n     * @param {?} element\n     * @param {?} prop\n     * @param {?=} defaultValue\n     * @return {?}\n     */\n    computeStyle(element, prop, defaultValue) {\n        return /** @type {?} */ ((/** @type {?} */ (window.getComputedStyle(element)))[prop]);\n    }\n    /**\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?} easing\n     * @param {?=} previousPlayers\n     * @return {?}\n     */\n    animate(element, keyframes, duration, delay, easing, previousPlayers = []) {\n        const /** @type {?} */ fill = delay == 0 ? 'both' : 'forwards';\n        const /** @type {?} */ playerOptions = { duration, delay, fill };\n        // we check for this to avoid having a null|undefined value be present\n        // for the easing (which results in an error for certain browsers #9752)\n        if (easing) {\n            playerOptions['easing'] = easing;\n        }\n        const /** @type {?} */ previousWebAnimationPlayers = /** @type {?} */ (previousPlayers.filter(player => { return player instanceof WebAnimationsPlayer; }));\n        return new WebAnimationsPlayer(element, keyframes, playerOptions, previousWebAnimationPlayers);\n    }\n}\n/**\n * @return {?}\n */\nfunction supportsWebAnimations() {\n    return typeof Element !== 'undefined' && typeof (/** @type {?} */ (Element)).prototype['animate'] === 'function';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AnimationDriver, Animation as ɵAnimation, AnimationStyleNormalizer as ɵAnimationStyleNormalizer, NoopAnimationStyleNormalizer as ɵNoopAnimationStyleNormalizer, WebAnimationsStyleNormalizer as ɵWebAnimationsStyleNormalizer, NoopAnimationDriver as ɵNoopAnimationDriver, AnimationEngine as ɵAnimationEngine, WebAnimationsDriver as ɵWebAnimationsDriver, supportsWebAnimations as ɵsupportsWebAnimations, WebAnimationsPlayer as ɵWebAnimationsPlayer };\n//# sourceMappingURL=browser.js.map\n",null]}