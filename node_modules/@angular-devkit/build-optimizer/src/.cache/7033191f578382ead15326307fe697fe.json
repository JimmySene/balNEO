{"remainingRequest":"/home/jimmy/Projets/balNEO/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/jimmy/Projets/balNEO/node_modules/written-number/lib/index.js","dependencies":[{"path":"/home/jimmy/Projets/balNEO/node_modules/written-number/lib/index.js","mtime":1554126048408},{"path":"/home/jimmy/Projets/balNEO/node_modules/cache-loader/dist/cjs.js","mtime":1554126047316},{"path":"/home/jimmy/Projets/balNEO/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1554126046704}],"contextDependencies":[],"result":["\"use strict\";\nexports = module.exports = writtenNumber;\nvar util = require(\"./util\");\n\nvar languages = [\"en\", \"es\", \"pt\", \"fr\", \"eo\", \"it\", \"vi\", \"tr\"];\nvar i18n = {\n  en: require(\"./i18n/en.json\"),\n  es: require(\"./i18n/es.json\"),\n  pt: require(\"./i18n/pt.json\"),\n  ptPT: require(\"./i18n/pt-PT.json\"),\n  fr: require(\"./i18n/fr.json\"),\n  eo: require(\"./i18n/eo.json\"),\n  it: require(\"./i18n/it.json\"),\n  vi: require(\"./i18n/vi.json\"),\n  tr: require(\"./i18n/tr.json\"),\n  hu: require(\"./i18n/hu.json\"),\n  enIndian: require(\"./i18n/en-indian.json\")\n};\nexports.i18n = i18n;\n\nvar shortScale = [100];\nfor (var i = 1; i <= 16; i++) {\n  shortScale.push(Math.pow(10, i * 3));\n}\n\nvar longScale = [100, 1000];\nfor (i = 1; i <= 15; i++) {\n  longScale.push(Math.pow(10, i * 6));\n}\n\nwrittenNumber.defaults = {\n  noAnd: false,\n  lang: \"en\"\n};\n\n/**\n * Converts numbers to their written form.\n *\n * @param {Number} n The number to convert\n * @param {Object} [options] An object representation of the options\n * @return {String} writtenN The written form of `n`\n */\n\nfunction writtenNumber(n, options) {\n  options = options || {};\n  options = util.defaults(options, writtenNumber.defaults);\n\n  if (n < 0) {\n    return \"\";\n  }\n\n  n = Math.round(+n);\n\n  var language = typeof options.lang === \"string\"\n    ? i18n[options.lang]\n    : options.lang;\n  var scale = language.useLongScale ? longScale : shortScale;\n  var units = language.units;\n  var unit;\n\n  if (!(units instanceof Array)) {\n    var rawUnits = units;\n\n    units = [];\n    scale = Object.keys(rawUnits);\n\n    for (var i in scale) {\n      units.push(rawUnits[scale[i]]);\n      scale[i] = Math.pow(10, parseInt(scale[i]));\n    }\n  }\n\n  if (!language) {\n    if (languages.indexOf(writtenNumber.defaults.lang) < 0) {\n      writtenNumber.defaults.lang = \"en\";\n    }\n\n    language = i18n[writtenNumber.defaults.lang];\n  }\n\n  var baseCardinals = language.base;\n\n  if (language.unitExceptions[n]) return language.unitExceptions[n];\n  if (baseCardinals[n]) return baseCardinals[n];\n  if (n < 100)\n    return handleSmallerThan100(n, language, unit, baseCardinals, options);\n\n  var m = n % 100;\n  var ret = [];\n\n  if (m) {\n    if (\n      options.noAnd &&\n      !(language.andException && language.andException[10])\n    ) {\n      ret.push(writtenNumber(m, options));\n    } else {\n      ret.push(language.unitSeparator + writtenNumber(m, options));\n    }\n  }\n\n  var firstSignificant;\n\n  for (var i = 0, len = units.length; i < len; i++) {\n    var r = Math.floor(n / scale[i]);\n    var divideBy;\n\n    if (i === len - 1) divideBy = 1000000;\n    else divideBy = scale[i + 1] / scale[i];\n\n    r %= divideBy;\n\n    unit = units[i];\n\n    if (!r) continue;\n    firstSignificant = scale[i];\n\n    if (unit.useBaseInstead) {\n      var shouldUseBaseException =\n        unit.useBaseException.indexOf(r) > -1 &&\n        (unit.useBaseExceptionWhenNoTrailingNumbers\n          ? i === 0 && ret.length\n          : true);\n      if (!shouldUseBaseException) {\n        ret.push(baseCardinals[r * scale[i]]);\n      } else {\n        ret.push(r > 1 && unit.plural ? unit.plural : unit.singular);\n      }\n      continue;\n    }\n\n    var str;\n    if (typeof unit === \"string\") {\n      str = unit;\n    } else {\n      str = r > 1 && unit.plural && (!unit.avoidInNumberPlural || !m)\n        ? unit.plural\n        : unit.singular;\n    }\n\n    if (\n      unit.avoidPrefixException &&\n      unit.avoidPrefixException.indexOf(r) > -1\n    ) {\n      ret.push(str);\n      continue;\n    }\n\n    var exception = language.unitExceptions[r];\n    var number =\n      exception ||\n      writtenNumber(\n        r,\n        util.defaults(\n          {\n            // Languages with and exceptions need to set `noAnd` to false\n            noAnd: !((language.andException && language.andException[r]) ||\n              unit.andException) && true\n          },\n          options\n        )\n      );\n    n -= r * scale[i];\n    ret.push(number + \" \" + str);\n  }\n\n  var firstSignificantN = firstSignificant * Math.floor(n / firstSignificant);\n  var rest = n - firstSignificantN;\n\n  if (\n    language.andWhenTrailing &&\n    firstSignificant &&\n    0 < rest &&\n    ret[0].indexOf(language.unitSeparator) !== 0\n  ) {\n    ret = [ret[0], language.unitSeparator.replace(/\\s+$/, \"\")].concat(\n      ret.slice(1)\n    );\n  }\n\n  return ret.reverse().join(\" \");\n}\n\nfunction handleSmallerThan100(n, language, unit, baseCardinals, options) {\n  var dec = Math.floor(n / 10) * 10;\n  unit = n - dec;\n  if (unit) {\n    return (\n      baseCardinals[dec] + language.baseSeparator + writtenNumber(unit, options)\n    );\n  }\n  return baseCardinals[dec];\n}\n",null]}