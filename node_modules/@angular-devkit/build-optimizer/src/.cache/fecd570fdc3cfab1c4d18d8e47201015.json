{"remainingRequest":"/home/mohamed/Jimmy/balNEO/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/mohamed/Jimmy/balNEO/node_modules/rxjs/_esm2015/observable/ArrayLikeObservable.js","dependencies":[{"path":"/home/mohamed/Jimmy/balNEO/node_modules/rxjs/_esm2015/observable/ArrayLikeObservable.js","mtime":1513892921000},{"path":"/home/mohamed/Jimmy/balNEO/node_modules/cache-loader/dist/cjs.js","mtime":1520938639765},{"path":"/home/mohamed/Jimmy/balNEO/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable extends Observable {\n    constructor(arrayLike, scheduler) {\n        super();\n        this.arrayLike = arrayLike;\n        this.scheduler = scheduler;\n        if (!scheduler && arrayLike.length === 1) {\n            this._isScalar = true;\n            this.value = arrayLike[0];\n        }\n    }\n    static create(arrayLike, scheduler) {\n        const length = arrayLike.length;\n        if (length === 0) {\n            return new EmptyObservable();\n        }\n        else if (length === 1) {\n            return new ScalarObservable(arrayLike[0], scheduler);\n        }\n        else {\n            return new ArrayLikeObservable(arrayLike, scheduler);\n        }\n    }\n    static dispatch(state) {\n        const { arrayLike, index, length, subscriber } = state;\n        if (subscriber.closed) {\n            return;\n        }\n        if (index >= length) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(arrayLike[index]);\n        state.index = index + 1;\n        this.schedule(state);\n    }\n    _subscribe(subscriber) {\n        let index = 0;\n        const { arrayLike, scheduler } = this;\n        const length = arrayLike.length;\n        if (scheduler) {\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n                arrayLike, index, length, subscriber\n            });\n        }\n        else {\n            for (let i = 0; i < length && !subscriber.closed; i++) {\n                subscriber.next(arrayLike[i]);\n            }\n            subscriber.complete();\n        }\n    }\n}\n//# sourceMappingURL=ArrayLikeObservable.js.map",null]}